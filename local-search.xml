<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ElasticSearch</title>
    <link href="/2022/10/22/ElasticSearch/"/>
    <url>/2022/10/22/ElasticSearch/</url>
    
    <content type="html"><![CDATA[<h2 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h2><p>elasticsearch是一款非常强大的<strong>开源搜索引擎</strong>，可以帮助我们从海量数据中快速找到需要的内容。</p><p>elasticsearch结合kibana、Logstash、Beats，即<strong>elastic stack（ELK）</strong>。被广泛应用在<strong>日志数据分析</strong>、<strong>实时监控</strong>等领域。</p><p>eleasticsearch是ELK的核心，负责存储、搜索、分析数据。</p><p><img src="/assets%5CELK.jpg"></p><p><strong>Lucene</strong>是一个Java语言的<strong>搜索引擎类库</strong>，是Apache公司的顶级项目，由DougCutting于1999年研发。</p><p>优势：</p><ul><li>易扩展</li><li>高性能（基于倒排索引）</li></ul><p>缺点：</p><ul><li>只限于java语言开发</li><li>学习曲线陡峭</li><li>不支持水平扩展</li></ul><p>相比较于lucene，eleasticsearch具备优势：</p><ul><li>支持分布式，可水平扩展</li><li>提供Restful接口，可被任何语言调用</li></ul><h3 id="正向索引和倒排索引"><a href="#正向索引和倒排索引" class="headerlink" title="正向索引和倒排索引"></a>正向索引和倒排索引</h3><p>传统数据库（如Mysql）采用正向索引。</p><p>elasticsearch采用倒排索引：</p><ul><li>文档（document）：每条数据就是一个文档</li><li>词条（term）：文档按照语义分成的词语</li></ul><p>正向索引先查文档，再看是否包含词条</p><p>倒排索引先查词条，在查对应的文档</p><h3 id="ES与Mysql对比"><a href="#ES与Mysql对比" class="headerlink" title="ES与Mysql对比"></a>ES与Mysql对比</h3><p>elasticsearch是面向文档存储的，可以是数据库中的一条商品数据，一个订单信息。</p><p>文档数据会被序列化为<strong>json格式</strong>后存储在elasticsearch中。</p><p><strong>索引（index）</strong>：相同类型文档的集合</p><p><img src="/assets%5Cindex.jpg"></p><p><strong>映射（mapping）</strong>：索引中文档的字段约束信息，类似表的结构约束</p><p><img src="/assets%5C%E6%A6%82%E5%BF%B5%E5%AF%B9%E6%AF%94.jpg"></p><ul><li><p>Mysql：擅长事务类型的操作，可以确保数据的安全性和一致性</p></li><li><p>ElasticSearch：擅长海量数据的搜索、分析、计算</p></li></ul><p><img src="/assets%5Cmysql%E5%92%8Ces.jpg"></p><h3 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h3><p>es在<strong>创建倒排索引时</strong>需要对文档进行分词；</p><p><strong>在搜索时</strong>，需要对用户输入内容分词。</p><p>但默认的分词规则对中文处理不友好。</p><p>处理中文分词，一般会使用<strong>IK分词器</strong>。</p><p>IK分词器包含两种模式：</p><ul><li><p><code>ik_smart</code>：只能切分，最少切分，粗粒度</p></li><li><p><code>ik_max_word</code>：最细切分，细粒度</p></li></ul><h4 id="拓展词库和停用词库"><a href="#拓展词库和停用词库" class="headerlink" title="拓展词库和停用词库"></a>拓展词库和停用词库</h4><p>要拓展ik分词器的词库，只需要修改一个ik分词器目录中的config目录中的IkAnanlzer.cfg.xml文件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml">﻿<span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">properties</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://java.sun.com/dtd/properties.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">comment</span>&gt;</span>IK Analyzer 扩展配置<span class="hljs-tag">&lt;/<span class="hljs-name">comment</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展字典 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_dict&quot;</span>&gt;</span>ext.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br> <span class="hljs-comment">&lt;!--用户可以在这里配置自己的扩展停止词字典--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">entry</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;ext_stopwords&quot;</span>&gt;</span>stopword.dic<span class="hljs-tag">&lt;/<span class="hljs-name">entry</span>&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展字典 --&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_dict&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="hljs-comment">&lt;!--用户可以在这里配置远程扩展停止词字典--&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;entry key=&quot;remote_ext_stopwords&quot;&gt;words_location&lt;/entry&gt; --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>然后在对应文件中添加要拓展的词或者要禁止的词。</p><h3 id="索引库操作"><a href="#索引库操作" class="headerlink" title="索引库操作"></a>索引库操作</h3><h4 id="mapping属性"><a href="#mapping属性" class="headerlink" title="mapping属性"></a>mapping属性</h4><p>mapping时对索引库中文档的约束，常见的mapping属性包括：</p><ul><li><p>type：字段数据类型，常见的简单类型：</p><ul><li>字符串：text（可分词的文本）、keyword（精确值，例如：品牌、国家、ip地址等）、</li><li>数值：long integer short byte double float</li><li>布尔：boolean</li><li>日期：date</li><li>对象：object</li></ul></li><li><p>index：是否创建索引，默认为true</p></li><li><p>analyzer：使用哪种分词器，只有text的字符串需要分词</p></li><li><p>properties：该字段的子字段</p></li></ul><h4 id="创建索引库"><a href="#创建索引库" class="headerlink" title="创建索引库"></a>创建索引库</h4><p>ES中通过Restful请求来操作索引库、文档。请求内容用DSL语句来表示。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs json">#创建索引库<br>PUT /test<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;mappings&quot;</span><span class="hljs-punctuation">:</span> <br>  <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span> <br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;text&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;analyzer&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ik_smart&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;index&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;object&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><br>          <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;keyword&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="查看、删除索引库"><a href="#查看、删除索引库" class="headerlink" title="查看、删除索引库"></a>查看、删除索引库</h4><p>查看：<code>GET /索引库名</code></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment">#查询</span><br><span class="hljs-built_in">GET</span> /test<br></code></pre></td></tr></table></figure><p>删除 ：<code>DELETE /索引库名</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#删除</span><br>DELETE /test<br></code></pre></td></tr></table></figure><h4 id="修改索引库"><a href="#修改索引库" class="headerlink" title="修改索引库"></a>修改索引库</h4><p>索引库和mapping一旦创建<strong>无法修改</strong>，但是<strong>可以添加</strong>新的字段：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">PUT /索引库名/_mapping<br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;新字段名&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;interger&quot;</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br>PUT /test/_mapping<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;properties&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;integer&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">#插入文档<br>POST /test/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;陈奥林程序员&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;111@qq.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;奥林&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;陈&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>#查询文档<br>GET /test/_doc/<span class="hljs-number">1</span><br>#删除文档<br>DELETE /test/_doc/<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>修改文档</p><ul><li>方式一：全量修改，会删除旧文档，添加新文档。如果id不存在会创建文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">#全量修改文档<br>PUT /test/_doc/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;不知名程序员&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;email&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;111@qq.com&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;firstName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;奥林&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;lastName&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;陈&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>方式二：增量修改，修改指定的字段</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">#局部修改<br>POST /test/_update/<span class="hljs-number">1</span><br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;doc&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;info&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;nb程序员&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="RestClient操作索引库"><a href="#RestClient操作索引库" class="headerlink" title="RestClient操作索引库"></a>RestClient操作索引库</h3><h4 id="索引库操作基本步骤"><a href="#索引库操作基本步骤" class="headerlink" title="索引库操作基本步骤"></a>索引库操作基本步骤</h4><ul><li>初始化<code>RestHighLevelClient</code></li><li>创建<code>XxxxIndexRequest</code>。xxx是<code>Create,Get,Delete</code></li><li>准备<code>DSL</code>（Create时需要）</li><li>发送请求。调用对应的&#96;RestHighLevelClient.indices().xxx()&#96;&#96;方法</li></ul><h4 id="创建索引库-1"><a href="#创建索引库-1" class="headerlink" title="创建索引库"></a>创建索引库</h4><p>ES官方提供了各种不同语言的客户端，用来操作ES。这些客户端的本质就是<strong>组装DSL语句</strong>，通过http请求发送给ES。</p><p><img src="/assets%5CRestclient%E6%93%8D%E4%BD%9C%E7%B4%A2%E5%BC%95%E5%BA%93.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">createHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//1.创建Request对象</span><br>        CreateIndexRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>        <span class="hljs-comment">//2.准备请求参数 DSL语句</span><br>        request.source(MAPPING_TEMPLATE, XContentType.JSON);<br>        <span class="hljs-comment">//3.发送请求</span><br>        client.indices().create(request, RequestOptions.DEFAULT);<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String MAPPING_TEMPLATE=<span class="hljs-string">&quot;&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;  \&quot;mappings\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \&quot;properties\&quot;: &#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;id\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;name\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;address\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;price\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;score\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;integer\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;brand\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;city\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;starName\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;:\&quot;keyword\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;business\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;copy_to\&quot;: \&quot;all\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;location\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;geo_point\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;pic\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;keyword\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;index\&quot;: false\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;      \&quot;all\&quot;:&#123;\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;type\&quot;: \&quot;text\&quot;,\n&quot;</span> +<br>            <span class="hljs-string">&quot;        \&quot;analyzer\&quot;: \&quot;ik_max_word\&quot;\n&quot;</span> +<br>            <span class="hljs-string">&quot;      &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;    \n&quot;</span> +<br>            <span class="hljs-string">&quot;  &#125;\n&quot;</span> +<br>            <span class="hljs-string">&quot;&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><h4 id="删除索引库"><a href="#删除索引库" class="headerlink" title="删除索引库"></a>删除索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//1.创建Request对象</span><br>    DeleteIndexRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//2.发送请求</span><br>    client.indices().delete(request,RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查询索引库"><a href="#查询索引库" class="headerlink" title="查询索引库"></a>查询索引库</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testExistsHotelIndex</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>     <span class="hljs-comment">//1.创建Request对象</span><br>     GetIndexRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">GetIndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>     <span class="hljs-comment">//2.发送请求</span><br>    <span class="hljs-type">boolean</span> exists= client.indices().exists(request,RequestOptions.DEFAULT);<br>    <span class="hljs-comment">//3.判断是否存在</span><br>     System.out.println(exists ? <span class="hljs-string">&quot;存在&quot;</span> : <span class="hljs-string">&quot;不存在&quot;</span>);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="RestClient操作文档"><a href="#RestClient操作文档" class="headerlink" title="RestClient操作文档"></a>RestClient操作文档</h3><h4 id="文档操作基本步骤"><a href="#文档操作基本步骤" class="headerlink" title="文档操作基本步骤"></a>文档操作基本步骤</h4><ul><li>初始化<code>RestHighLevelClient</code>。</li><li>创建<code>XxxRequest</code>。Xxx是<code>Index Get Update Delete</code></li><li>准备参数。（<code>Index</code>和<code>Update</code>时需要）</li><li>发送请求。调用<code>RestHighLevelClient.xxx()</code>方法，<code>xxx</code>是<code>index get update delete</code></li></ul><h4 id="新增文档"><a href="#新增文档" class="headerlink" title="新增文档"></a>新增文档</h4><p><img src="/assets%5CRestclient%E6%93%8D%E4%BD%9C%E6%96%87%E6%A1%A3.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testAddDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//根据id查询酒店</span><br>   Hotel hotel= hotelService.getById(<span class="hljs-number">61083L</span>);<br>    <span class="hljs-comment">//转换为文档类型</span><br>    HotelDoc hotelDoc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br>    <span class="hljs-comment">//1.准备request对象</span><br>    IndexRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>).id(hotel.getId().toString());<br>    <span class="hljs-comment">//2.准备json对象</span><br>    request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);<span class="hljs-comment">//source是酒店的数据部分</span><br>    System.out.println(JSON.toJSONString(hotelDoc));<br>    <span class="hljs-comment">//3.发送请求</span><br>    <span class="hljs-built_in">this</span>.client.index(request, RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetDocumentById</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//1.准备request</span><br>    GetRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">GetRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>,<span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">//2.发送请求，得到响应</span><br>    GetResponse response=client.get(request,RequestOptions.DEFAULT);<br>    <span class="hljs-comment">//3，解析响应结果</span><br>    String json=response.getSourceAsString();<br>    <span class="hljs-comment">//4.转换为对象类型</span><br>    HotelDoc hotelDoc= JSON.parseObject(json,HotelDoc.class);<br>    System.out.println(hotelDoc);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="修改文档（局部更新）"><a href="#修改文档（局部更新）" class="headerlink" title="修改文档（局部更新）"></a>修改文档（局部更新）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testUpdateDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//1.准备request对象</span><br>    UpdateRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">UpdateRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>,<span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">//2.准备请求参数</span><br>    request.doc(<span class="hljs-string">&quot;price&quot;</span>,<span class="hljs-string">&quot;999&quot;</span>,<span class="hljs-string">&quot;starName&quot;</span>,<span class="hljs-string">&quot;奥迪双钻&quot;</span>);<br>    <span class="hljs-comment">//3.发送请求</span><br>    client.update(request,RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testDeleteDocument</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//1.准备request对象</span><br>    DeleteRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">DeleteRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>,<span class="hljs-string">&quot;61083&quot;</span>);<br>    <span class="hljs-comment">//2.发送请求</span><br>    client.delete(request,RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="批量导入文档"><a href="#批量导入文档" class="headerlink" title="批量导入文档"></a>批量导入文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testBulkRequest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//批量查询酒店数据</span><br>    List&lt;Hotel&gt; hotelList=hotelService.list();<br>    <span class="hljs-comment">//1.创建bulkrequest对象</span><br>     BulkRequest bulkRequest=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BulkRequest</span>();<br>    <span class="hljs-comment">//2.准备多个参数，添加多个新增的request</span><br>    <span class="hljs-keyword">for</span> (Hotel hotel : hotelList)&#123;<br>        <span class="hljs-comment">//转换为hoteldoc</span><br>        HotelDoc hotelDoc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">HotelDoc</span>(hotel);<br>        bulkRequest.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>)<br>                .id(hotelDoc.getId().toString())<br>                .source(JSON.toJSONString(hotelDoc),XContentType.JSON));<br>    &#125;<br>    <span class="hljs-comment">//3.发送请求</span><br>    client.bulk(bulkRequest,RequestOptions.DEFAULT);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Domain-Specific-Language查询"><a href="#Domain-Specific-Language查询" class="headerlink" title="Domain Specific Language查询"></a>Domain Specific Language查询</h3><ul><li><p>查询所有：查询出所有的数据，一般测试用。例如：<code>match_all</code></p></li><li><p>全文检索（<code>full text</code>）查询：利用分词器对用户输入的内容进行分词，然后去倒排索引库中匹配。例如：</p><ul><li><code>match_query</code>：对用户输入内容分词，然后去倒排索引库检索</li><li><code>multi_match_query</code>：与match类似，允许同时查询多个字段</li></ul></li><li><p>精确查询：根据精确词条值查找数据，一般是查找keyword、数值、日期、boolean、等类型字段。例如：</p><ul><li><code>ids</code></li><li><code>range</code>：根据值的范围查询</li><li><code>term</code>：根据词条精确值查询</li></ul></li><li><p>地理（geo）查询：根据经纬度查询。例如：</p><ul><li><code>geo_distance</code>：查询到指定<strong>中心点</strong>小于某个距离值的所有文档</li><li><code>geo_bounding_box</code>：查询geo_point值落在某个<strong>矩形</strong>范围内的所有文档</li></ul></li><li><p>复合查询（compound）查询：合并查询可以将上述各种查询条件组合起来，合并查询条件，实现更复杂的逻辑查询。例如：</p><ul><li><code>boolean</code>：布尔查询是一个或多个查询子句的组合</li><li><code>function_score</code>：算分函数查询，可以控制文档相关性算分，控制文档排名，例如百度竞价。</li></ul></li></ul><h4 id="查询DSL基本语法"><a href="#查询DSL基本语法" class="headerlink" title="查询DSL基本语法"></a>查询DSL基本语法</h4><ul><li><code>GET /索引库名/_search</code></li><li><code>&#123;&quot;query&quot;:&#123;&quot;查询类型&quot;：&#123;&quot;FIELD&quot;:&quot;TEXT&quot;&#125;&#125;&#125;</code></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs json">#查询所有<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span>  <br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>#全文检索查询——match<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;外滩&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>#全文检索查询——multi_match<br>#和copy to效果一样，但是查询效率低<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;multi_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;外滩如家&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;name&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;brand&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-string">&quot;business&quot;</span><span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>#精确查询——term<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;value&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;杭州&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>#精确查询——range<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2000</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>#地理查询——geo_bounding_box<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;geo_bounding_box&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;top_left&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">31.1</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">121.5</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;bottom_right&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">30.9</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">121.7</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br>#地理查询——geo_distance<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <br>    <span class="hljs-attr">&quot;geo_distance&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;distance&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;15km&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;31.251433, 121.47522&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="相关性算分"><a href="#相关性算分" class="headerlink" title="相关性算分"></a>相关性算分</h4><p>当我们利用match查询时，文档结果会根据与搜索词条的关联度打分（__score）,返回结果时按照分值降序排列。</p><p><img src="/assets%5C%E7%9B%B8%E5%85%B3%E6%80%A7%E7%AE%97%E6%B3%95.jpg"></p><ul><li><strong>TF-IDF</strong>：在elasticsearch5.0之前，会随着词频增加而越来越大</li><li><strong>BM25</strong>：在elasticsearch5.0之后，会随着词频的增加而增大，但增长的曲线会区域水平</li></ul><h4 id="Function-Score-Query"><a href="#Function-Score-Query" class="headerlink" title="Function Score Query"></a>Function Score Query</h4><p><img src="/assets%5Cfunctionscorequery.jpg"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs json"># function score query<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;function_score&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;外滩&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;functions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;term&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>              <span class="hljs-attr">&quot;brand&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>          <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;weight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">10</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;boost_mode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;sum&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>三要素：</p><ul><li>过滤条件：那些文档要加分</li><li>算分函数：如何计算function score</li><li>加权方式：function score与query score如何计算</li></ul><h4 id="Boolean-Query"><a href="#Boolean-Query" class="headerlink" title="Boolean Query"></a>Boolean Query</h4><p>一个或多个查询子句的组合，子查询的组合方式有：</p><ul><li><code>must</code>：必须匹配每个子查询，类似“与”</li><li><code>should</code>：选择性匹配子查询，类似“或”</li><li><code>must_not</code>:必须不匹配，不参与算分，类似“非”</li><li><code>filter</code>：必须匹配，不参与算分</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs json">GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;bool&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;must&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家&quot;</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;must_not&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;gt&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span>    <br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;filter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;geo_distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;10km&quot;</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">31.21</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">121.5</span><br>          <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span>  <br>        <span class="hljs-punctuation">&#125;</span><br>      <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="搜索结果处理"><a href="#搜索结果处理" class="headerlink" title="搜索结果处理"></a>搜索结果处理</h3><h5 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h5><p>es支持对搜索结果排序，默认是按照相关度算分（_score）来排序，可以排序的字段类型有：<strong>keyword类型，数值类型，地理坐标类型，日期类型</strong>。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//sort排序</span><br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;range&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;gte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">1000</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;lte&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">2000</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;score&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;asc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-comment">//地理排序</span><br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;_geo_distance&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;location&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>          <span class="hljs-attr">&quot;lat&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">31.034661</span><span class="hljs-punctuation">,</span><br>          <span class="hljs-attr">&quot;lon&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">-121.612282</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;asc&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;unit&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;km&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h5 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h5><p>es默认情况下只返回top10的数据，如果要查询更多的数据就需要修改分页参数。</p><p>es中通过修改<code>from</code>、<code>size</code>参数来控制要返回的分页结果。</p><ul><li>form：分页开始的位置，默认为0</li><li>size：期望获取的文档总数</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">#分页查询<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match_all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;sort&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;price&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;order&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;desc&quot;</span><br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;from&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;size&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><strong>深度分页问题</strong></p><p>es是分布式的，所以会面临深度分页问题。对于es集群，必须聚合所有结果，重新排序截取前size个。</p><p>如果搜索页数过深，或者结果集from+size越大，对内存和CPU消耗也就越高，因此es设定结果集的查询上限是10000。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;error&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;root_cause&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>     <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;type&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;illegal_argument_exception&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;reason&quot;</span> <span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Result window is too large, from + size must be less than or equal to: [10000] but was [10019]. See the scroll api for a more efficient way to request large data sets. This limit can be set by changing the [index.max_result_window] index level setting.&quot;</span><br>     <span class="hljs-punctuation">&#125;</span><br>   <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p><strong>解决方案</strong></p><ul><li>_search after_：分页时需要排序，原理是从上一次的排序值开始，查询下一页数据。官方推荐</li><li>_scroll_：原理将排序数据形成快照，保存到内存。官方不推荐</li></ul><p><img src="/assets%5C%E5%88%86%E9%A1%B5%E6%96%B9%E5%BC%8F%E5%AF%B9%E6%AF%94.jpg"></p><h5 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h5><p>在搜索结果中把搜索关键字突出显示。</p><p>原理：</p><ul><li>将搜索结果中的关键字用标签标记出来</li><li>在页面中给出标签添加css样式</li></ul><p><em>默认情况下，ES搜索字段必须与高亮字段一致</em></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">#高亮显示<br>GET /hotel/_search<br><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;query&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;all&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;如家&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;highlight&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;fields&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;require_field_match&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;false&quot;</span><br>        <br>      <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br>  <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br><br></code></pre></td></tr></table></figure><h3 id="RestClient查询文档"><a href="#RestClient查询文档" class="headerlink" title="RestClient查询文档"></a>RestClient查询文档</h3><ul><li>创建<code>SearchRequest</code>对象</li><li>准备<code>Request.source()</code>，也就是DSL<ul><li><code>QueryBuilders</code>来构建查询条件</li><li>传入<code>Request.source()</code>的<code>query()</code>方法</li></ul></li><li>发送请求，得到结果</li><li>解析结果（参考JSON结果，从外到内，逐层解析）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">testMatchAll</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       <span class="hljs-comment">//1.准备request</span><br>       SearchRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>       <span class="hljs-comment">//2.准备DSL</span><br>       request.source().query(QueryBuilders.matchAllQuery());<br>       <span class="hljs-comment">//3.发送请求</span><br>      SearchResponse response= client.search(request, RequestOptions.DEFAULT);<br>      <br>      <br>      <br>       <span class="hljs-comment">//4.解析结果</span><br>       SearchHits searchHits=response.getHits();<br>       <span class="hljs-comment">//4.1获取总条数</span><br>       <span class="hljs-type">long</span> total=searchHits.getTotalHits().value;<br>       <span class="hljs-comment">//4.2获取文档数组</span><br>       SearchHit[] hits=searchHits.getHits();<br>       <span class="hljs-comment">//4.3遍历</span><br>       <span class="hljs-keyword">for</span> (SearchHit hit:hits)&#123;<br>           <span class="hljs-comment">//获取文档source</span><br>           String json=hit.getSourceAsString();<br>           <span class="hljs-comment">//反序列化</span><br>           HotelDoc doc= JSON.parseObject(json,HotelDoc.class);<br>           System.out.println(doc);<br>       &#125;<br>   &#125;<br>   <span class="hljs-meta">@Test</span><br>   <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBoolean</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>       <span class="hljs-comment">//1.准备request</span><br>       SearchRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>       <span class="hljs-comment">//2.准备DSL</span><br>       <span class="hljs-comment">//2.1准备BooleanQuery</span><br>       <span class="hljs-type">BoolQueryBuilder</span> <span class="hljs-variable">boolQuery</span> <span class="hljs-operator">=</span> QueryBuilders.boolQuery();<br>       <span class="hljs-comment">//2.2添加term</span><br>       boolQuery.must(QueryBuilders.termQuery(<span class="hljs-string">&quot;city&quot;</span>,<span class="hljs-string">&quot;上海&quot;</span>));<br>       <span class="hljs-comment">//2.3添加range</span><br>       boolQuery.filter(QueryBuilders.rangeQuery(<span class="hljs-string">&quot;price&quot;</span>).lte(<span class="hljs-number">250</span>));<br><br>       request.source().query(boolQuery);<br>       <span class="hljs-comment">//3.发送请求</span><br>       SearchResponse response= client.search(request, RequestOptions.DEFAULT);<br><br>       handleResponse(response);<br>   &#125;<br><br></code></pre></td></tr></table></figure><p>RestAPI中其中构建DSL是通过<code>HighLevelRestClient</code>中的<code>resource()</code>来实现的，其中包括<strong>查询，排序，分页，高亮</strong>等所有功能。</p><p>构建查询条件的核心部分是由一个名为<code>QueryBUilders</code>的工具类提供的，其中包括了<strong>各种查询方法</strong>。</p><p><strong>要构建查询条件，只要记住一个类：QueryBuilders</strong></p><h3 id="RestClient排序和分页"><a href="#RestClient排序和分页" class="headerlink" title="RestClient排序和分页"></a>RestClient排序和分页</h3><p>搜索结果和的排序和分页是与query同级的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">testPageAndSort</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//页码，每页大小</span><br>    <span class="hljs-type">int</span> page=<span class="hljs-number">2</span>,size=<span class="hljs-number">5</span>;<br>    <span class="hljs-comment">//1.准备request</span><br>    SearchRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>    <span class="hljs-comment">//2.准备DSL</span><br>    <span class="hljs-comment">//2.1准备Query</span><br>    request.source().query(QueryBuilders.matchAllQuery());<br>    <span class="hljs-comment">//2.2排序sort</span><br>    request.source().sort(<span class="hljs-string">&quot;price&quot;</span>, SortOrder.ASC);<br>    <span class="hljs-comment">//2.3分页from，size</span><br>    request.source().from((page-<span class="hljs-number">1</span>)*size).size(size);<br>    <span class="hljs-comment">//3.发送请求</span><br>    SearchResponse response= client.search(request, RequestOptions.DEFAULT);<br><br>    handleResponse(response);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="RestClient高亮"><a href="#RestClient高亮" class="headerlink" title="RestClient高亮"></a>RestClient高亮</h3><p>高亮API包括请求DSL构建和结果解析两部分。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"> <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleResponse</span><span class="hljs-params">(SearchResponse response)</span> &#123;<br>        <span class="hljs-comment">//4.解析结果</span><br>        SearchHits searchHits= response.getHits();<br>        <span class="hljs-comment">//4.1获取总条数</span><br>        <span class="hljs-type">long</span> total=searchHits.getTotalHits().value;<br>        <span class="hljs-comment">//4.2获取文档数组</span><br>        SearchHit[] hits=searchHits.getHits();<br>        <span class="hljs-comment">//4.3遍历</span><br>        <span class="hljs-keyword">for</span> (SearchHit hit:hits)&#123;<br>            <span class="hljs-comment">//获取文档source</span><br>            String json=hit.getSourceAsString();<br>            <span class="hljs-comment">//反序列化</span><br>            HotelDoc doc= JSON.parseObject(json,HotelDoc.class);<br><br>            <span class="hljs-comment">//获取高亮结果</span><br>            Map&lt;String, HighlightField&gt; highlightFields=hit.getHighlightFields();<br><br>            <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(highlightFields)) &#123;<br>                <span class="hljs-comment">//根据字段名获取高亮结果</span><br>                <span class="hljs-type">HighlightField</span> <span class="hljs-variable">highlightField</span> <span class="hljs-operator">=</span> highlightFields.get(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-comment">//获取高亮值</span><br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> highlightField.getFragments()[<span class="hljs-number">0</span>].toString();<br>                <span class="hljs-comment">//覆盖非高亮结果</span><br>                doc.setName(name);<br>            &#125;<br>            System.out.println(doc);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHighLight</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//页码，每页大小</span><br>        <span class="hljs-type">int</span> page=<span class="hljs-number">2</span>,size=<span class="hljs-number">5</span>;<br>        <span class="hljs-comment">//1.准备request</span><br>        SearchRequest request=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SearchRequest</span>(<span class="hljs-string">&quot;hotel&quot;</span>);<br>        <span class="hljs-comment">//2.准备DSL</span><br>        <span class="hljs-comment">//2.1准备Query</span><br>        request.source().query(QueryBuilders.matchQuery(<span class="hljs-string">&quot;all&quot;</span>,<span class="hljs-string">&quot;如家&quot;</span>));<br>        <span class="hljs-comment">//2.2高亮</span><br>        request.source().highlighter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HighlightBuilder</span>().field(<span class="hljs-string">&quot;name&quot;</span>).requireFieldMatch(<span class="hljs-literal">false</span>));<br>        <span class="hljs-comment">//3.发送请求</span><br>        SearchResponse response= client.search(request, RequestOptions.DEFAULT);<br><br>        handleResponse(response);<br>    &#125;<br></code></pre></td></tr></table></figure><p><strong>所有DSL的构建，记住source()方法！</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>ElasticSearch</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringAMQP</title>
    <link href="/2022/10/22/SpringAMQP/"/>
    <url>/2022/10/22/SpringAMQP/</url>
    
    <content type="html"><![CDATA[<h2 id="SpringAMQP"><a href="#SpringAMQP" class="headerlink" title="SpringAMQP"></a>SpringAMQP</h2><p>Advanced Message Queuing Protocol：是用于在应用程序或之间传递业务消息的开放标准。该协议与语言和平台无关，更符合微服务中独立性的要求。</p><p>Spring AMQP 是基于AMQP协议定义的一套<strong>API规范</strong>，提供了模板来发送和接收消息。包含两部分，其中spring-amqp是基础抽象，spring-rabbit是底层的默认实现。</p><h3 id="HelloWorld案例"><a href="#HelloWorld案例" class="headerlink" title="HelloWorld案例"></a>HelloWorld案例</h3><ol><li><p>在父工程中引入spring-amqp的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--AMQP依赖，包含RabbitMQ--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在publish服务中利用RabbitTemplate发送消息到simplequeue这个队列</p><ol><li><p>在publisher服务中编写application.yml，添加mq连接信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">49.235</span><span class="hljs-number">.83</span><span class="hljs-number">.188</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">cal</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure></li><li><p>在publisher服务中新建测试类，编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringRunner.class)</span><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringAmqpTest</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RabbitTemplate rabbitTemplate;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage2SimpleQueue</span><span class="hljs-params">()</span>&#123;<br>        String queueName=<span class="hljs-string">&quot;simple.queue&quot;</span>;<br>        String message=<span class="hljs-string">&quot;hello,mother fuck!&quot;</span>;<br>        rabbitTemplate.convertAndSend(queueName,message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p>在consumer服务中编写消费逻辑，绑定simplequeue这个队列</p><ol><li><p>在consumer服务中编写application.yml，添加mq连接配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">rabbitmq:</span><br>    <span class="hljs-attr">host:</span> <span class="hljs-number">49.235</span><span class="hljs-number">.83</span><span class="hljs-number">.188</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">5672</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">cal</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123</span><br>    <span class="hljs-attr">virtual-host:</span> <span class="hljs-string">/</span><br></code></pre></td></tr></table></figure></li><li><p>在consumer服务中新建一个类，编写消费逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpringRabbitListener</span> &#123;<br>    <span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueue</span><span class="hljs-params">(String msg)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我收到的消息&quot;</span>+msg);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li></ol><h3 id="Work-Queue案例"><a href="#Work-Queue案例" class="headerlink" title="Work Queue案例"></a>Work Queue案例</h3><p>提高消息处理速度，避免堆积。</p><ol><li><p>在publisher服务中定义测试方法，每秒产生50条消息，发送到simple.queue</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendMessage2WorkQueue</span><span class="hljs-params">()</span>&#123;<br>      String queueName=<span class="hljs-string">&quot;simple.queue&quot;</span>;<br>      String message=<span class="hljs-string">&quot;hello,mother fuck!___&quot;</span>;<br>      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">50</span>;i++) &#123;<br>          rabbitTemplate.convertAndSend(queueName, message + i);<br>      &#125;<br>  &#125;<br></code></pre></td></tr></table></figure></li><li><p>在consumer服务中定义两个消息监听者，都监听simple.queue队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueue1</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者1收到的消息&quot;</span>+msg+ <span class="hljs-string">&quot; &quot;</span>+LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">20</span>);<br>&#125;<br>   <br><span class="hljs-meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenSimpleQueue2</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.err.println(<span class="hljs-string">&quot;消费者2收到的消息&quot;</span>+msg+<span class="hljs-string">&quot; &quot;</span>+LocalTime.now());<br>    Thread.sleep(<span class="hljs-number">200</span>);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>消费者1每秒处理50条消息，消费者2每秒处理10条消息</p></li></ol><p><strong>消息预取限制</strong></p><p>修改application.yml，设置preFetch的值，可以控制消息预取的上限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">spring:<br>  rabbitmq:<br>    host: <span class="hljs-number">49.235</span><span class="hljs-number">.83</span><span class="hljs-number">.188</span><br>    port: <span class="hljs-number">5672</span><br>    username: cal<br>    password: <span class="hljs-number">123</span><br>    virtual-host: /<br>    listener:<br>      simple:<br>        prefetch: <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h3 id="发布（Publish）、订阅（Subscribe）案例"><a href="#发布（Publish）、订阅（Subscribe）案例" class="headerlink" title="发布（Publish）、订阅（Subscribe）案例"></a>发布（Publish）、订阅（Subscribe）案例</h3><p>发布订阅模式与之前案例的区别就是允许将同一消息发送给多个消费者。实现方式是加入了<strong>交换机（exchange）</strong>。</p><p>常见的exchange类型：</p><ul><li><strong>Fanout</strong>：广播</li><li><strong>Direct</strong>：路由</li><li><strong>Topic</strong>：话题</li></ul><p><strong>exchange负责消息的转发，不负责存储，转发失败则消息丢失！！！</strong></p><h4 id="FanoutExchange"><a href="#FanoutExchange" class="headerlink" title="FanoutExchange"></a>FanoutExchange</h4><p>Fanout Exchange会将接收到的消息路由到每一个跟其绑定的queue。</p><p>SpringAMQP提供了声明交换机<strong>Exchange</strong>、队列<strong>Queue</strong>、绑定关系<strong>Binding</strong>的API。</p><ol><li><p>在consumer服务中，利用代码声明队列、交换机，并将两者绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FanoutConfig</span> &#123;<br>    <span class="hljs-comment">//1.声明交换机</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FanoutExchange <span class="hljs-title function_">fanoutExchange</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FanoutExchange</span>(<span class="hljs-string">&quot;cal.fanout&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//2.声明队列</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue1&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//3.绑定关系</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">fanoutBinding1</span><span class="hljs-params">(Queue fanoutQueue1,FanoutExchange fanoutExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder<br>                .bind(fanoutQueue1).<br>                to(fanoutExchange);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Queue <span class="hljs-title function_">fanoutQueue2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Queue</span>(<span class="hljs-string">&quot;fanout.queue2&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> Binding <span class="hljs-title function_">fanoutBinding2</span><span class="hljs-params">(Queue fanoutQueue2,FanoutExchange fanoutExchange)</span>&#123;<br>        <span class="hljs-keyword">return</span> BindingBuilder<br>                .bind(fanoutQueue2).<br>                to(fanoutExchange);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在counsumer服务中，编写两个消费者方法，分别监听fanout.queue1和fanout.queue2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">   <br><span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue1&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue1</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者收到fanout.queue1的消息:&quot;</span>+msg);<br>&#125;<br><span class="hljs-meta">@RabbitListener(queues = &quot;fanout.queue2&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenFanoutQueue2</span><span class="hljs-params">(String msg)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者收到fanout.queue2的消息:&quot;</span>+msg);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在publisher中编写测试方法，向cal.fanout发送消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendFanoutExchange</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;cal.fanout&quot;</span>;<br>     String msg=<span class="hljs-string">&quot;hello,everyone,mother fuck!&quot;</span>;<br>     rabbitTemplate.convertAndSend(exchangeName,<span class="hljs-string">&quot;&quot;</span>,msg);<br> &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="DirectExchange"><a href="#DirectExchange" class="headerlink" title="DirectExchange"></a>DirectExchange</h4><p>DirectExchange会将接收到的消息根据规则路由到指定的Queue，因此称为路由模式（<strong>routes</strong>）。</p><ul><li>每一个Queue都与Exchange设置一个或多个<strong>BindingKey</strong></li><li>发布者发送消息时，指定消息的<strong>RoutingKey</strong></li><li>Exchange将消息路由到<strong>BindingKey与消息RoutingKey</strong>一致的队列</li></ul><p>当绑定多个BindingKey时，与Fanout交换机功能一样。</p><ol><li><p>利用<code>@RabbitListener</code>声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者服务，分别监听direct.queue1和direct.queue2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">         value = @Queue(name = &quot;direct.queue1&quot;),</span><br><span class="hljs-meta">         exchange = @Exchange(name = &quot;cal.direct&quot;,type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">         key = &#123;&quot;red&quot;,&quot;blue&quot;&#125;</span><br><span class="hljs-meta"> ))</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">listenDirectQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;消费者接收到的direct.queue1的消息&quot;</span>+msg);<br> &#125;<br>   <br> <span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">         value = @Queue(name = &quot;direct.queue2&quot;),</span><br><span class="hljs-meta">         exchange = @Exchange(name = &quot;cal.direct&quot;,type = ExchangeTypes.DIRECT),</span><br><span class="hljs-meta">         key = &#123;&quot;red&quot;,&quot;yellow&quot;&#125;</span><br><span class="hljs-meta"> ))</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">listenDirectQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>     System.out.println(<span class="hljs-string">&quot;消费者接收到的direct.queue2的消息&quot;</span>+msg);<br> &#125;<br></code></pre></td></tr></table></figure></li><li><p>在publisher中编写测试方法，向itcast.direct发送消息</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendDirectExchange</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;cal.direct&quot;</span>;<br>     String msg=<span class="hljs-string">&quot;hello,red,mother fuck!&quot;</span>;<br>     rabbitTemplate.convertAndSend(exchangeName,<span class="hljs-string">&quot;red&quot;</span>,msg);<br> &#125;<br></code></pre></td></tr></table></figure><h4 id="TopicExchange"><a href="#TopicExchange" class="headerlink" title="TopicExchange"></a>TopicExchange</h4><p>TopicExchange与DirectExchange类似，区别在于routingkey必须是多个单词的列表，并且以<code>.</code>分割。</p><p>Queue与Exchange指定BindingKey时可以使用通配符：</p><ul><li>#：代指0个或多个单词</li><li>*：代指一个单词</li></ul><ol><li><p>利用<code>@RabbitListener</code>声明Exchange、Queue、RoutingKey</p></li><li><p>在consumer服务中，编写两个消费者方法，分别监听topic.queue1和topic.queue2</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        value = @Queue(name = &quot;topic.queue1&quot;),</span><br><span class="hljs-meta">        exchange = @Exchange(name = &quot;cal.topic&quot;,type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">        key = &quot;china.#&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue1</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到topic.queue1的消息&quot;</span>+msg);<br>&#125;<br><span class="hljs-meta">@RabbitListener(bindings = @QueueBinding(</span><br><span class="hljs-meta">        value = @Queue(name = &quot;topic.queue2&quot;),</span><br><span class="hljs-meta">        exchange = @Exchange(name = &quot;cal.topic&quot;,type = ExchangeTypes.TOPIC),</span><br><span class="hljs-meta">        key = &quot;#.news&quot;</span><br><span class="hljs-meta">))</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenTopicQueue2</span><span class="hljs-params">(String msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;消费者接收到topic.queue2的消息&quot;</span>+msg);<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>在publisher中编写测试方法，向cal.topic发送消息</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSendTopicExchange</span><span class="hljs-params">()</span>&#123;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">exchangeName</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;cal.topic&quot;</span>;<br>     String msg=<span class="hljs-string">&quot;hello,mother fuck!&quot;</span>;<br>     rabbitTemplate.convertAndSend(exchangeName,<span class="hljs-string">&quot;china.news&quot;</span>,msg);<br> &#125;<br></code></pre></td></tr></table></figure><h3 id="消息转换器"><a href="#消息转换器" class="headerlink" title="消息转换器"></a>消息转换器</h3><p>Spring的对消息对象的处理时由<code>org.springframework.amqp.support.convert.MessageaConvert</code>来处理的。而默认实现是SimpleMessageConvert，基于JDK的ObjectOutputStream完成序列化。</p><p>如果要修改只需要定义一个MessgeConvert类型的Bean即可。推荐使用JSON方式序列化：</p><ol><li><p>在publisher服务引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>在publisher服务的启动类声明MessageConvert：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> MessageConverter <span class="hljs-title function_">messageConverter</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Jackson2JsonMessageConverter</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>consumer服务的操作一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RabbitListener(queues = &quot;object.queue&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenObjectQueue</span><span class="hljs-params">(Map&lt;String,Object&gt; msg)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;接收到的消息&quot;</span>+msg);<br>&#125;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>RabbitMQ</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker</title>
    <link href="/2022/10/22/docker/"/>
    <url>/2022/10/22/docker/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h3><h4 id="镜像和容器"><a href="#镜像和容器" class="headerlink" title="镜像和容器"></a>镜像和容器</h4><p><strong>镜像（image）</strong>：Docker将应用程序及其所需的依赖、函数库、环境、配置等文件打包在一起，称为镜像</p><p><strong>容器（container）</strong>：镜像中的应用程序运行后形成的进程就是容器，只是Docker会给容器做隔离，<strong>对外不可见</strong></p><h4 id="DockerHub"><a href="#DockerHub" class="headerlink" title="DockerHub"></a>DockerHub</h4><p>Dockerhub是一个docker镜像的托管平台，这样的平台称为Docker Registry。国内类似DockerHubde公开服务平台，如网易云镜像服务，阿里云镜像服务。</p><h4 id="Docker架构-1"><a href="#Docker架构-1" class="headerlink" title="Docker架构"></a>Docker架构</h4><p>Docker是一个CS架构的程序，由两部分组成：</p><ul><li>服务端-server：Docker守护进程，负责处理docker指令，管理镜像，容器等】</li><li>客户端-client：通过命令或RestAPI向Docker服务端发送指令。可以在本地或远程向服务端发送指令</li></ul><p><img src="/assets%5CDocker%E6%9E%B6%E6%9E%84.jpg"></p><h3 id="Docker基本操作"><a href="#Docker基本操作" class="headerlink" title="Docker基本操作"></a>Docker基本操作</h3><p>镜像名称一般分为两部分组成:<code>[respository]:[tag]</code>，在没有指定tag时，默认是latest，代表最新版本的镜像</p><h5 id="镜像操作命令"><a href="#镜像操作命令" class="headerlink" title="镜像操作命令"></a>镜像操作命令</h5><p><img src="/assets%5Cdocker%E9%95%9C%E5%83%8F%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4.jpg"></p><h5 id="容器相关命令"><a href="#容器相关命令" class="headerlink" title="容器相关命令"></a>容器相关命令</h5><p><img src="/assets%5Cdocker%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4.jpg"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec //进入容器执行命令<br>docker logs //查看容器运行日志<br>docker ps //查看所有运行的容器及其状态<br></code></pre></td></tr></table></figure><h3 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h3><p>容器与数据耦合的问题</p><ul><li>不便于修改</li><li>数据不可复用</li><li>升级维护困难</li></ul><p><strong>数据卷（volume）</strong>是一个虚拟目录，指向宿主机文件系统的某个目录。</p><h3 id="挂载数据卷"><a href="#挂载数据卷" class="headerlink" title="挂载数据卷"></a>挂载数据卷</h3><p><img src="/assets%5Cdocker%E6%8C%82%E8%BD%BD.jpg"></p><ol><li>docker run 的命令通过<code>-v</code>参数挂载文件或目录到容器中：<ol><li><code>-v volume名称:容器内目录</code></li><li><code>-v 宿主机文件:容器内文件</code></li><li><code>-v 宿主机目录:容器内目录</code></li></ol></li><li>数据卷挂载与目录直接挂载<ul><li>数据卷挂载耦合度低，由docker来管理目录，但是目录较深，不好找</li><li>目录挂载耦合度高，需要自己管理目录，不过容易查找位置</li></ul></li></ol><h3 id="Docker自定义镜像"><a href="#Docker自定义镜像" class="headerlink" title="Docker自定义镜像"></a>Docker自定义镜像</h3><p><strong>镜像</strong>：镜像是将应用程序及其需要的系统函数库、环境、配置、依赖打包而成。</p><p><img src="/assets%5Cmysql%E9%95%9C%E5%83%8F%E7%BB%93%E6%9E%84.jpg"></p><p>镜像是分层结构，每一层称为一个layer</p><ul><li>Baseimage层：包含基本的系统函数库、环境变量、文件系统</li><li>Entrypoint:入口，是镜像中应用的启动命令</li><li>其他：再Baseimage基础上添加依赖、安装程序、完成整个应用的安装配置</li></ul><h4 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h4><p><strong>Dockerfile</strong>就是一个文本文件，其中包含一个个的<strong>指令</strong>，用指令来说明要执行什么擦欧总来构建镜像。每一个指令都会形成一层layer</p><p><img src="/assets%5Cdockerfile%E6%8C%87%E4%BB%A4.jpg"></p><h3 id="DockerCompose"><a href="#DockerCompose" class="headerlink" title="DockerCompose"></a>DockerCompose</h3><p>Docker Compose可以基于Compose文件帮助我们快速部署分布式的应用，而无需手动一个个创建和运行容器。</p><p>Compose文件是一个文本文件，通过指定定义集群中的每个容器如何运行。</p><h3 id="Docker镜像仓库"><a href="#Docker镜像仓库" class="headerlink" title="Docker镜像仓库"></a>Docker镜像仓库</h3><p>公共仓库：例如Docker官方的Docker hub，国内的网易云镜像服务，阿里巴巴镜像服务</p><p>私有仓库：企业或用户自己搭建的Docker Registry</p><ol><li>推送本地镜像到仓库前都必须重命名（<code>docker tag</code>）镜像，以镜像仓库地址为前缀</li><li>镜像仓库推送前需要把仓库地址配置到docker服务的daemon.json，被docker信任</li><li>推送使用<code>docker push</code></li><li>拉取使用<code>docker pull</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Gateway</title>
    <link href="/2022/10/22/Gateway/"/>
    <url>/2022/10/22/Gateway/</url>
    
    <content type="html"><![CDATA[<h2 id="GateWay"><a href="#GateWay" class="headerlink" title="GateWay"></a>GateWay</h2><p>网关功能：</p><ul><li>身份认证和权限认证</li><li>服务路由、负载均衡</li><li>请求限流</li></ul><p>SpringCloud网关的技术实现：</p><ul><li>gateway</li><li>zuul</li></ul><p>Zuul是基于Servlet的实现。属于<strong>阻塞式编程</strong>。而SpringCloudGateWay则是基于Spring5中提供的WebFlux，属于<strong>响应式编程</strong>的实现，具备更好的性能。</p><h4 id="搭建网关服务"><a href="#搭建网关服务" class="headerlink" title="搭建网关服务"></a>搭建网关服务</h4><ol><li>创建新的module，引入SpringCloudGateWay的依赖和nacos的服务发现依赖</li><li>编写路由配置及nacos地址</li></ol><p>路由配置包括：</p><ul><li>路由id：路由的唯一标识</li><li>路由uri：路由的目标地址，http代表固定地址，lb代表根据服务名负载均衡</li><li>路由断言predicates：判断路由的规则</li><li>路由过滤器filters：对请求或响应做处理</li></ul><h4 id="路由断言工厂Route-Predicate-Factory"><a href="#路由断言工厂Route-Predicate-Factory" class="headerlink" title="路由断言工厂Route Predicate Factory"></a>路由断言工厂Route Predicate Factory</h4><p>我们在配置文件中写的断言规则只是字符串，这些字符串会被<strong>Predicate Factory</strong>读取并处理，转变为路由判断的条件。</p><p>Spring提供了11种基本的Predicate工厂：</p><p><img src="/assets%5CPredicateFactory.jpg"></p><h4 id="路由过滤器-GatewayFilter"><a href="#路由过滤器-GatewayFilter" class="headerlink" title="路由过滤器 GatewayFilter"></a>路由过滤器 GatewayFilter</h4><p>GatewayFilter时网关中提供的一种过滤器，可以对<strong>进入</strong>网关的请求和微服务<strong>返回</strong>的响应做处理。</p><p><img src="/assets%5C%E8%BF%87%E6%BB%A4%E5%99%A8.jpg"></p><p>Spring中提供了31种不同的路由过滤器工厂。</p><p><img src="/assets%5C%E8%BF%87%E6%BB%A4%E5%99%A8%E5%B7%A5%E5%8E%82.jpg"></p><h5 id="默认过滤器："><a href="#默认过滤器：" class="headerlink" title="默认过滤器："></a>默认过滤器：</h5><p>如果要对所有的路由都生效，则可以将过滤器工厂写到<code>default-filters</code>下。</p><h5 id="全局过滤器："><a href="#全局过滤器：" class="headerlink" title="全局过滤器："></a>全局过滤器：</h5><p>全局过滤器的作用也是处理一切进入网关的请求和微服务响应，与GatewayFilter的作用一样。</p><p>区别在于GatewatFilter通过配置定义，处理逻辑是固定的，而GlobalFilter的逻辑需要自己写代码实现。</p><p>定义方式是实现GlobalFilter接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@Order(-1)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthorizeFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span> , Ordered &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-comment">//1.获取请求参数</span><br>        ServerHttpRequest request=exchange.getRequest();<br>        MultiValueMap&lt;String,String&gt; params=request.getQueryParams();<br><br>        <span class="hljs-comment">//2.获取参数种的authorization参数</span><br>        String auth=params.getFirst(<span class="hljs-string">&quot;authorization&quot;</span>);<br><br>        <span class="hljs-comment">//3.判断参数值是否等于admin</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;admin&quot;</span>.equals(auth))&#123;<br>            <span class="hljs-comment">//4.是，放行</span><br>            <span class="hljs-keyword">return</span> chain.filter(exchange);<br>        &#125;<br>        <span class="hljs-comment">//5.否，拦截</span><br>        <span class="hljs-comment">//5.1设置状态码</span><br>        exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);<br>        <span class="hljs-comment">//5.2拦截请求</span><br>        <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br><br>    &#125;<br></code></pre></td></tr></table></figure><h4 id="过滤器执行顺序"><a href="#过滤器执行顺序" class="headerlink" title="过滤器执行顺序"></a>过滤器执行顺序</h4><p>请求进入网关会碰到三类过滤器：当前路由的过滤器，DefaultFilter，GlobalFilter</p><p>请求路由后，会将三种路由过滤器合并到一个过滤器链（集合）中，排序后依次执行每个过滤器。</p><p><img src="/assets%5C%E8%BF%87%E6%BB%A4%E5%99%A8%E9%93%BE.jpg"></p><ul><li>每一个过滤器都必须指定一个int类型的order值，<strong>order值越小，优先级越高，执行顺序越靠前</strong></li><li>GlobalFilter通过实现Ordered接口，或者添加<code>@Order</code>注解，来指定order值，有我们自己指定</li><li>路由过滤器和defaultFilter的order由Spring指定，默认是按照声明顺序从1递增</li><li>当过滤器的order值一样时，会按照<strong>defaultFilter&gt;路由过滤器&gt;GlobalFilte</strong>r的顺序执行。</li></ul><p><img src="/assets%5C%E8%BF%87%E6%BB%A4%E5%99%A8%E9%A1%BA%E5%BA%8F.jpg"></p><h4 id="跨域问题处理"><a href="#跨域问题处理" class="headerlink" title="跨域问题处理"></a>跨域问题处理</h4><p>跨域：域名不一致就是跨域，主要包括：</p><ul><li>域名不同</li><li>域名相同，端口不通</li></ul><p>跨域问题：<strong>浏览器禁止</strong>请求的发起者与服务端发生ajax请求，请求被浏览器拦截的问题</p><p>解决方案：CORS（跨域资源共享）</p><p>网关处理跨域采用的同样是CORS方案，并且只需要简单的配置即可。</p><p><img src="/assets%5CCORS%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Gateway</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Feign</title>
    <link href="/2022/10/22/Feign/"/>
    <url>/2022/10/22/Feign/</url>
    
    <content type="html"><![CDATA[<h2 id="Feign"><a href="#Feign" class="headerlink" title="Feign"></a>Feign</h2><h3 id="RestTemplate方式调用存在的问题"><a href="#RestTemplate方式调用存在的问题" class="headerlink" title="RestTemplate方式调用存在的问题"></a>RestTemplate方式调用存在的问题</h3><ul><li>代码可读性差，变成体验不统一</li><li>参数复杂URL难以维护</li><li>不够优雅</li></ul><p>Feign是一个声明式的http客户端。其作用就是帮助我们优雅的实现http请求的发送，解决上面的问题。</p><h3 id="定义和使用Feign客户端"><a href="#定义和使用Feign客户端" class="headerlink" title="定义和使用Feign客户端"></a>定义和使用Feign客户端</h3><ol><li>引入依赖</li><li>在order-service的启动类添加注解<code>@EnableFeignClients</code>开启Feign的功能</li><li>编写Feign客户端使用<code>@FeignClient</code>注解</li></ol><p>主要是基于SpringMVC的注解来生命远程调用的信息，比如：</p><ul><li>服务名称</li><li>请求方式</li><li>请求参数</li><li>返回值类型</li></ul><p><strong>Feign已经集成了Ribbion，自动实现负载均衡</strong></p><h3 id="Feign自定义配置"><a href="#Feign自定义配置" class="headerlink" title="Feign自定义配置"></a>Feign自定义配置</h3><p>Feign运行自定义配置来覆盖默认配置，可以修改的配置如下：</p><p><img src="/assets%5CFeign%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE.jpg"></p><p>一般需要更改的是<strong>日志级别</strong>。</p><p>配置Feign日志有两种方式：</p><p>方式一：配置文件方式</p><ol><li>全局生效</li></ol><p><img src="/assets%5CFeign%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%85%A8%E5%B1%80%E7%94%9F%E6%95%88.jpg"></p><ol><li>某个服务生效</li></ol><p><img src="/assets%5CFeign%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%B1%80%E9%83%A8%E7%94%9F%E6%95%88.jpg"></p><p>方式二：Java代码配置，需要声明一个Bean</p><p><img src="/assets%5CFeign%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AEJava%E4%BB%A3%E7%A0%81%E6%96%B9%E5%BC%8F.jpg"></p><ol><li><p>如果是全局配置，将类放到<code>@EnableFeignClients</code>注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(defaultConfiguration=FeignClientConfiguration.class)</span><br></code></pre></td></tr></table></figure></li><li><p>如果是局部配置，则把它放到<code>@FeignClient</code>这个注解中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FeignClient(value=&quot;userservice&quot;,configuratoin=FeignClientConfiguration.class&quot;)</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Feign性能优化"><a href="#Feign性能优化" class="headerlink" title="Feign性能优化"></a>Feign性能优化</h3><p>Feign底层的客户端实现</p><ul><li>URLConnection:默认实现，不支持连接池</li><li>Apach HttpClient:支持连接池</li><li>OKHttp:支持连接池</li></ul><p>优化Feign的性能主要包括：</p><ol><li>使用连接池代替默认的URLConnection</li><li>日志级别，最好使用basic或none</li></ol><h4 id="连接池配置"><a href="#连接池配置" class="headerlink" title="连接池配置"></a>连接池配置</h4><ol><li><p>引入依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.github.openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">aratifactId</span>&gt;</span>feign-httpclient<span class="hljs-tag">&lt;<span class="hljs-name">aratifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>配置连接池</p></li></ol><h3 id="Feign最佳实践"><a href="#Feign最佳实践" class="headerlink" title="Feign最佳实践"></a>Feign最佳实践</h3><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><p>给<strong>消费者的FeignClient</strong>和<strong>提供者的controller</strong>定义统一的父接口作为标准</p><p> 缺点:</p><ul><li>服务紧耦合</li><li>父接口参数列表中的映射不会被继承</li></ul><h4 id="抽取"><a href="#抽取" class="headerlink" title="抽取"></a>抽取</h4><p>将FeignClient抽取为<strong>独立模块</strong>，并且把接口有关的<strong>POJO</strong>、<strong>默认的Feign配置</strong>都放到这个模块中 ，提供给所有消费者使用。</p><p>步骤：</p><ol><li>首先新建一个module，然后引入feign的stater依赖</li><li>将order-service中编写的UserClient、User、DefaultFeignCOnfiguration都赋值到新模块中</li><li>在order-service中引入新模块</li></ol><p>当定义的FeignClient不在SpringBootApplication的扫描包范围时，这些FeignClient无法使用。有两种方式解决：</p><p>方式一：指定FeignClient所在包</p><p>方式二：指定FeignClient字节码</p>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Feign</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nacos</title>
    <link href="/2022/10/22/Nacos/"/>
    <url>/2022/10/22/Nacos/</url>
    
    <content type="html"><![CDATA[<h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><h3 id="服务注册到Nacos"><a href="#服务注册到Nacos" class="headerlink" title="服务注册到Nacos"></a>服务注册到Nacos</h3><ol><li>在cloud-demo父工程中添加<code>spring-cloud-alibaba</code>的管理依赖</li><li>注释掉orderservice和userservice中原有的erureka依赖</li><li>添加nacos客户端依赖</li></ol><h3 id="Nacos服务分级存储模型"><a href="#Nacos服务分级存储模型" class="headerlink" title="Nacos服务分级存储模型"></a>Nacos服务分级存储模型</h3><p>服务 集群 实例</p><p><img src="/assets%5CNacos%E9%9B%86%E7%BE%A4.jpg"></p><p>服务调用尽可能选择本地集群的服务，跨集群调用延迟较高，本地集群不可访问是，再去访问其他集群。</p><h3 id="NacosRule负载均衡策略"><a href="#NacosRule负载均衡策略" class="headerlink" title="NacosRule负载均衡策略"></a>NacosRule负载均衡策略</h3><p>优先选择本地集群，在本地集群中随机选择，本地没有服务才会跨集群。</p><p>Nacos提供了权重负载均衡：在Nacos控制台可以设置实例的权重值，选中实例后面的编辑按钮。权重为0不会被访问。可以做到平滑升级服务。</p><h3 id="环境隔离"><a href="#环境隔离" class="headerlink" title="环境隔离"></a>环境隔离</h3><p><strong>Namespace</strong>：Nacos中<strong>服务存储</strong>和<strong>数据存储</strong>的最外层都是一个名为namespace的东西，用来做最外层隔离。不同命名空间的实例不可见。</p><h3 id="临时实例和非临时实例"><a href="#临时实例和非临时实例" class="headerlink" title="临时实例和非临时实例"></a>临时实例和非临时实例</h3><p>服务注册到Nacos时，可以选择注册为临时或者非临时实例。</p><h3 id="Nacos配置管理"><a href="#Nacos配置管理" class="headerlink" title="Nacos配置管理"></a>Nacos配置管理</h3><h4 id="统一配置管理"><a href="#统一配置管理" class="headerlink" title="统一配置管理"></a>统一配置管理</h4><ul><li>配置更改热更新</li></ul><p>配置获取步骤如下：</p><p><img src="/assets%5CNacos%E9%85%8D%E7%BD%AE%E8%8E%B7%E5%8F%96%E6%AD%A5%E9%AA%A4.jpg"></p><h4 id="将服务交给Nacos管理的步骤"><a href="#将服务交给Nacos管理的步骤" class="headerlink" title="将服务交给Nacos管理的步骤"></a>将服务交给Nacos管理的步骤</h4><ol><li>在Nacos中添加配置文件</li><li>在微服务中引入nacos的config依赖</li><li>在微服务中添加bootstrap.yml，配置nacos地址，当前环境、服务名称、文件后缀名。这些决定了程序启动时去读取nacos的哪个配置文件</li></ol><h4 id="配置热更新"><a href="#配置热更新" class="headerlink" title="配置热更新"></a>配置热更新</h4><p>Nacos配置文件变更后，微服务无需重写启动就可以感知。需要配置：</p><p>方式一：在<code>@value</code>注入的变量所在<strong>类</strong>上添加注解<code>@RefreshScope</code></p><p>方式二：使用<code>@ConfigurationProperties</code>注解（<strong>推荐</strong>）</p><h4 id="多环境配置共享"><a href="#多环境配置共享" class="headerlink" title="多环境配置共享"></a>多环境配置共享</h4><ul><li>微服务启动时会从nacos读取多个配置文件<ol><li>服务名-环境.yaml</li><li>服务名.yaml</li></ol></li></ul><p>无论profile如何变化，服务名.yaml这个文件一定会加载，因此多环境共享配置可以写入这个文件。</p><p>多种配置文件优先级：</p><p>服务名-profile.yaml&gt;服务名.yaml&gt;本地配置</p><h4 id="Nacos集群搭建"><a href="#Nacos集群搭建" class="headerlink" title="Nacos集群搭建"></a>Nacos集群搭建</h4><p>基本步骤：</p><ul><li>搭建数据库，初始化数据库表结构</li><li>下载Nacos安装包</li><li>配置Nacos</li><li>启动nacos集群</li><li>nginx反向代理</li></ul>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Nacos</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eureka</title>
    <link href="/2022/10/22/Eureka/"/>
    <url>/2022/10/22/Eureka/</url>
    
    <content type="html"><![CDATA[<h2 id="Eureka"><a href="#Eureka" class="headerlink" title="Eureka"></a>Eureka</h2><h3 id="服务调用出现的问题"><a href="#服务调用出现的问题" class="headerlink" title="服务调用出现的问题"></a>服务调用出现的问题</h3><ol><li><p>服务消费者该如何获取其服务提供者的地址信息？</p></li><li><p>如果有多个服务提供者，消费者该如何选择?</p></li><li><p>消费者如何得知服务提供者的健康状态？</p></li></ol><h3 id="Eureka的作用"><a href="#Eureka的作用" class="headerlink" title="Eureka的作用"></a>Eureka的作用</h3><ul><li>eureka-server：服务端，注册中心<ul><li>记录服务信息</li><li>心跳监控</li></ul></li><li>eureka-client：客户端<ul><li>Provider：服务提供者<ul><li>注册自己的信息到EurekaServer</li><li>每隔30秒发送一次心跳</li></ul></li><li>Consumer：服务消费者<ul><li>根据服务名称从EurekaServer中拉取服务列表</li><li>基于服务列表做负载均衡，选中一个微服务后发起远程调用</li></ul></li></ul></li></ul><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><ol><li><p>服务提供者启动时向eureka注册自己的信息，eureka保存这些信息，消费者根据服务名称向eureka拉取提供者信息</p></li><li><p>服务消费者利用负载均衡算法，从服务列表中挑选一个</p></li><li><p>服务提供者会每隔30秒向EurekaServer发送心跳请求，报告健康状况，eureka会更新记录服务列表信息，心跳不正常会被剔除，消费者就可以拉取代最新的信息</p></li></ol><h3 id="搭建EurekaServer"><a href="#搭建EurekaServer" class="headerlink" title="搭建EurekaServer"></a>搭建EurekaServer</h3><p>步骤：</p><ol><li>创建项目，引入<code>spring-cloud-stater-netflix-eureka-server</code>的依赖</li><li>编写启动类，添加<code>@EnableEurekaServer</code>注解</li><li>添加<code>application.yml</code>文件，编写配置</li></ol><h4 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h4><h5 id="将user-service服务注册到EurekaServer"><a href="#将user-service服务注册到EurekaServer" class="headerlink" title="将user-service服务注册到EurekaServer"></a>将user-service服务注册到EurekaServer</h5><ol><li><p>在user-service项目引入<code>spring-cloud-starter-netflix-eureka-client</code>依赖</p></li><li><p>在application.yml文件，编写配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">application:</span><br><span class="hljs-symbol">name:</span> userservice<br><span class="hljs-symbol"> eureka:</span><br><span class="hljs-symbol">  client:</span><br>  service-url:<br><span class="hljs-symbol">  defaultZone:</span>http:<span class="hljs-comment">//127.0.0.1:10086/eureka/</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h4><ol><li>修改OrderService的代码，修改访问的url路径，用服务名代替IP，端口</li><li>在orderservice项目的启动类orderapplication中的RestTemplate添加<strong>负载均衡</strong>注解<code>@LoadBlanced</code></li></ol><h3 id="Ribbon负载均衡"><a href="#Ribbon负载均衡" class="headerlink" title="Ribbon负载均衡"></a>Ribbon负载均衡</h3><h4 id="负载均衡流程"><a href="#负载均衡流程" class="headerlink" title="负载均衡流程"></a>负载均衡流程</h4><p> <img src="/assets%5CRibbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%B5%81%E7%A8%8B.jpg"></p><h4 id="负载均衡策略"><a href="#负载均衡策略" class="headerlink" title="负载均衡策略"></a>负载均衡策略</h4><p>Ribbon的负载均衡策略是一个叫做IRule的接口来定义的，每个子接口都是一种规则：</p><p><img src="/assets%5CIRule.jpg"></p><p><img src="/assets%5C%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5%E8%AF%A6%E8%A7%A3.jpg"></p><p>通过定义IRule实现可以修改负载均衡策略，有两种方式：</p><ol><li><p><strong>代码方式</strong>：在orderservice中的orderapplication类中，定义一个新的IRule：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> IRule <span class="hljs-title function_">randomRule</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">RandomRule</span>();<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>配置文件方式</strong>：在order-service的application.yml中，添加新的配置也可修改规则：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">userservice:</span><br><span class="hljs-symbol">ribbon:</span><br><span class="hljs-symbol">NFLoadBanlancerRuleClassName:</span>com.netflix.loadbanlancer.RandomRule<span class="hljs-meta">#负载均衡规则</span><br></code></pre></td></tr></table></figure></li></ol><h4 id="饥饿加载和懒加载"><a href="#饥饿加载和懒加载" class="headerlink" title="饥饿加载和懒加载"></a>饥饿加载和懒加载</h4><p>Ribbon默认都是采用<strong>懒加载</strong>，即第一次访问时才会去创建LoadBalanceClient，请求时间会很长。而<strong>饥饿加载</strong>则会在项目启动时创建，降低第一次访问的耗时，可以通过配置文件开启饥饿加载：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">ribbon:</span><br><span class="hljs-attr">eager-load:</span><br><span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span> <span class="hljs-comment">#开启饥饿加载</span><br><span class="hljs-attr">client:</span> <br><span class="hljs-string">-userservice</span> <span class="hljs-comment">#指定对userservice这个服务开启饥饿加载</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringCloud</tag>
      
      <tag>Eureka</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Annotation</title>
    <link href="/2022/10/22/Annotation/"/>
    <url>/2022/10/22/Annotation/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是Java-Annotation"><a href="#什么是Java-Annotation" class="headerlink" title="什么是Java Annotation"></a>什么是Java Annotation</h2><p>Annotation是从JDK5.0开始引入的新技术。</p><h2 id="Annotation的作用"><a href="#Annotation的作用" class="headerlink" title="Annotation的作用"></a>Annotation的作用</h2><ul><li>不是程序本身，可以对程序作出解释。</li><li>可以被其他程序（比如编译器）读取</li></ul><h2 id="Annotationd的格式"><a href="#Annotationd的格式" class="headerlink" title="Annotationd的格式"></a>Annotationd的格式</h2><p>注解是以”@注解名”在代码中存在的，还可以添加一些参数值。例如@SuppressWarning(value&#x3D;”unchecked”)</p><h2 id="Annotation在哪里使用"><a href="#Annotation在哪里使用" class="headerlink" title="Annotation在哪里使用"></a>Annotation在哪里使用</h2><p>可以在package、class、method、filed等等上面，相当于给他们添加了额外的辅助信息，我们可以通过反射机制编程实现对这些元数据的访问。</p><h2 id="Java内置注解"><a href="#Java内置注解" class="headerlink" title="Java内置注解"></a>Java内置注解</h2><p>__@Override__：定义在Java.lang.Override中，此注解只适用于修辞方法，表示一个方法声明打算重写超类中的另一个方法。</p><p>__@Deprecated__：定义在Java.lang.Deprecated中，此注解可以用于修辞方法，属性，类，不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择。</p><p>__@SuppressWarnings__：定义在Java.lang.SuppressWarnings中，用来抑制编译时的警告信息。需要添加一个参数才能使用。</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>元注解的作用就是负责注解其他的注解。Java定义了4个标准的meta-annotation类型，他们被用来提供对其他注解类型的说明。这些类型和它们所支持的类在Java.lang.annotation包中可以找到</p><ul><li>__@Target__：描述注解使用的范围。</li><li>__@Retention__：表示需要在什么级别保存该注释信息，用于描述注解的声明周期。（SOURCE&lt;CLASS&lt;RUNTIME）</li><li><strong>@Documented</strong>:说明该注解将包含在javadoc中</li><li><strong>@Inherited</strong>:说明子类可以继承父类中的该注解</li></ul><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>使用__@Interface__自定义注解时，自动继承了__java.lang.annotation.Annotation__接口</p><p>分析：</p><ul><li>__@Interface__用来声明一个注解，格式：public @Interface 注解名 {定义内容}</li><li>其中的每一个方法实际上时声明了一个配置参数。</li><li>方法的名称就是参数的名称、</li><li>返回值类型就是参数的类型（返回值只能是基本类型，Class，String，enum）</li><li>可以通过default来声明参数的默认值</li><li>如果只有一个参数成员，一般参数名为value</li><li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Reflection</title>
    <link href="/2022/10/22/Reflection/"/>
    <url>/2022/10/22/Reflection/</url>
    
    <content type="html"><![CDATA[<h2 id="Java反射机制概述"><a href="#Java反射机制概述" class="headerlink" title="Java反射机制概述"></a>Java反射机制概述</h2><h3 id="动态语言"><a href="#动态语言" class="headerlink" title="动态语言"></a>动态语言</h3><p>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或者其他结构上的变化。通俗的说就是在运行时可以根据某些条件改变其自身结构。</p><p>例如：Object-C、C#、JavaScript、PHP、Python</p><h3 id="静态语言"><a href="#静态语言" class="headerlink" title="静态语言"></a>静态语言</h3><p>与动态语言相比，运行时结构不可变的语言就是静态语言。如Java，C，C++</p><p>Java不是动态用语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用Java反射机制获得类似动态语言的特性。Java的动态性让编程更加灵活。</p><h2 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h2><p>Reflection（反射）时Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><p>加载完类之后，在__堆内存的方法区__中就产生了一个__Class类型__的对象（一个类只有一个Class对象），这个Class对象就包含了__类的完整结构信息__，我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的内部结构，所以形象的称之为__反射__。</p><h2 id="Java反射提供的功能"><a href="#Java反射提供的功能" class="headerlink" title="Java反射提供的功能"></a>Java反射提供的功能</h2><ol><li>运行时判断任意一个对象所属的类</li><li>运行时构造任意一个类的对象</li><li>运行时判断任意一个类所具有的成员变量和方法</li><li>运行时获取泛型信息</li><li>运行时调用任意一个对象的成员变量和方法</li><li>运行时处理注解</li><li>生成动态代理</li><li>…</li></ol><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><p>可以实现动态创建对象和编译，体现出很大的灵活性</p><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><p>对性能有影响。使用反射机制基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满足我们的要求。这类操作总是慢于直接执行相同的操作。</p><h2 id="反射相关的API"><a href="#反射相关的API" class="headerlink" title="反射相关的API"></a>反射相关的API</h2><p><strong>java.lang.Class</strong>:代表一个类</p><p><strong>java.lang.reflect.Field</strong>:代表类的成员变量</p><p><strong>java.lang.reflect.Method</strong>:代表类的成员方法</p><p><strong>java.lang.reflect.Constructor</strong>:代表类的构造器</p><h2 id="Class类"><a href="#Class类" class="headerlink" title="Class类"></a>Class类</h2><p>对象照镜子后可以得到的信息：某个类的__属性__、__方法__、和__构造器__、某个类到底实现了哪些__接口__。</p><p>对于每个类而言，JRE都为其保留了一个不变的Class类型的对象。一个Class对象包含了特定的某个结构的有关信息。</p><ul><li>Class本身是一个类</li><li>Class对象只能由系统建立</li><li>一个加载的类在JVM中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是有哪个Class实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象，</li></ul><h3 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h3><p><img src="/assets%5CClass%E7%B1%BB%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95.jpg"></p><h3 id="获取Class类的实例"><a href="#获取Class类的实例" class="headerlink" title="获取Class类的实例"></a>获取Class类的实例</h3><p><img src="/assets%5C%E8%8E%B7%E5%BE%97Class%E7%B1%BB%E7%9A%84%E5%AE%9E%E4%BE%8B.png"></p><h3 id="哪些类型可以有Class对象"><a href="#哪些类型可以有Class对象" class="headerlink" title="哪些类型可以有Class对象"></a>哪些类型可以有Class对象</h3><p>__class__：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类</p><p>__interface__：接口</p><p><strong>[]</strong>:数组</p><p>__enum__：枚举</p><p>__annotation__：注解</p><p>__primitive type__：基本数据类型</p><p><strong>void</strong></p><h2 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h2><p>Java内存</p><ul><li><p>堆：存放new的对象和数组，可以被所有线程共享，不会存放别的对象引用</p></li><li><p>栈：</p><ul><li>存放基本变量类型（包括这个基本类型的数值）</li><li>引用对象的变量（存放这个引用在堆里面的具体地址）</li></ul></li><li><p>方法区：</p><ul><li>可以被所有的线程共享</li><li>包含了所有的class和static变量</li></ul></li></ul><h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><p><img src="/assets%5C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B.jpg"></p><h4 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h4><p>将class文件字节码内容加载到__内存__中，并将这些__静态数据__转换成__方法区__的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象。</p><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><p>将__Java类的二进制代码__合并到JVM的运行状态之中的过程</p><h5 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h5><p>确保加载的类信息符合JVM规范，没有安全方面的问题</p><h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都在方法区中进行分配</p><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>执行类构造器方法的过程，类构造器方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）</p><p>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先初始化父类</p><p>虚拟机会保证一个类的类构造器方法在多线程环境中被正确的加锁和同步</p><h4 id="什么时候会发生类的初始化"><a href="#什么时候会发生类的初始化" class="headerlink" title="什么时候会发生类的初始化"></a>什么时候会发生类的初始化</h4><h5 id="类的主动引用——一定会发生类的初始化"><a href="#类的主动引用——一定会发生类的初始化" class="headerlink" title="类的主动引用——一定会发生类的初始化"></a>类的主动引用——一定会发生类的初始化</h5><ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类时，如果其父类没有被初始化，则先会初始化它的父类</li></ul><h5 id="类的被动引用——不会发生类的初始化"><a href="#类的被动引用——不会发生类的初始化" class="headerlink" title="类的被动引用——不会发生类的初始化"></a>类的被动引用——不会发生类的初始化</h5><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类的引用，不会触发类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池了）</li></ul><h3 id="类加载器的作用"><a href="#类加载器的作用" class="headerlink" title="类加载器的作用"></a>类加载器的作用</h3><p>将class文件字节码内容加载到__内存__中，并将这些静态数据转换成方法区的运行时数据结构，然后再堆中生成一个代表这个类的Java.lang.Class对象，作为方法区中类数据的访问入口。</p><p>__类缓存__：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，他将维持加载（缓存）一段时间。不过JVM的垃圾回收机制可以回收这些Class对象。</p><p>JVM定义了如下类型的类加载器：</p><h4 id="引导类加载器"><a href="#引导类加载器" class="headerlink" title="引导类加载器"></a>引导类加载器</h4><p>用C++编写，是JVM自带的类加载器，负责__Java平台核心库__，用来装载核心类库。该加载器无法直接获取。</p><h4 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h4><p>负责__jre&#x2F;lib&#x2F;ext下__的jar包或java.ext.dirs指定目录下的jar包装入工作库</p><h4 id="系统类加载器"><a href="#系统类加载器" class="headerlink" title="系统类加载器"></a>系统类加载器</h4><p>负责__java-classpath__或者java.class.path所指的目录下的类与Jar包转入工作，是最常用的类加载器。</p><h2 id="获取运行时类的完整结构"><a href="#获取运行时类的完整结构" class="headerlink" title="获取运行时类的完整结构"></a>获取运行时类的完整结构</h2><p>通过反射获取运行时类的完整结构：<strong>Field Method Constructor Superclass Interface Annotation</strong></p><p>获得类名：<strong>getName() getSimpleName()</strong></p><p>获得属性：<strong>getFields()</strong>;只能找到public属性</p><p>​<strong>getDeclaredField()</strong>;获得所有属性</p><p>获得方法：<strong>getMethod()</strong>;获得本类和父类的所有public方法</p><p>​<strong>getDeclaredMethod()</strong>;获得本类的所有方法</p><p>​</p><p>获得指定的构造器：<strong>getConstructor()</strong> 获得public的构造方法</p><p>​  <strong>getDeclaredConstructor()</strong> 获得所有的构造方法</p><p>获得注解：<strong>getAnnotations()</strong></p><p>​__getAnnotation()__获得指定的注解</p>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SpringDesignPattern</title>
    <link href="/2022/10/22/SpringDesignPattern/"/>
    <url>/2022/10/22/SpringDesignPattern/</url>
    
    <content type="html"><![CDATA[<h2 id="Spring中的设计模式"><a href="#Spring中的设计模式" class="headerlink" title="Spring中的设计模式"></a>Spring中的设计模式</h2><h3 id="单例模式-Singleton-Pattern"><a href="#单例模式-Singleton-Pattern" class="headerlink" title="单例模式(Singleton Pattern)"></a>单例模式(Singleton Pattern)</h3><p><font color=red>Ensure a class has only one instance, and provide a global point of access to it.</font></p><p>确保一个类在任何情况下都绝对只有一个实例，并提供一个全局访问点。</p><h4 id="类加载"><a href="#类加载" class="headerlink" title="类加载"></a>类加载</h4><ol><li><p>创建类的实例，也就是new一个对象</p></li><li><p>访问某个类或接口的静态变量，或者对该静态变量赋值</p></li><li><p>调用类的静态方法</p></li><li><p>反射（Class.forName(“com.lyj.load”)）</p></li><li><p>初始化一个类的子类（会首先初始化子类的父类）</p></li><li><p>JVM启动时标明的启动类，即文件名和类名相同的那个类 只有这6中情况才会导致类的类的初始化。</p></li></ol><h4 id="三种反射的区别"><a href="#三种反射的区别" class="headerlink" title="三种反射的区别"></a>三种反射的区别</h4><ul><li><p>类名.class：JVM将使用类装载器，将类装入内存(前提是:类还没有装入内存)，不做类的初始化工作，返回Class的对象。</p></li><li><p>Class.forName(“类名字符串”)：装入类，并做类的静态初始化，返回Class的对象。</p></li><li><p>实例对象.getClass()：对类进行静态初始化、非静态初始化；返回引用运行时真正所指的对象(子对象的引用会赋给父对象的引用变量中)所属的类的Class的对象。</p></li></ul><h4 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a>饿汉式单例模式</h4><p>类加载的时候就立即初始化，并且创建单例对象。它是绝对的线程安全、在线程还没出现以前就实现了，不可能存在访问安全问题。</p><p>类加载的时候就初始化单例对象了，用不用都进行，浪费内存</p><ul><li>写法1</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//写法1</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HungrySingleton</span> &#123;<br>    <span class="hljs-comment">//在类内部就初始化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">HungrySingleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HungrySingleton</span>();<br>    <span class="hljs-comment">//构造函数私有 外部不能访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">HungrySingleton</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;Hello,I am a HungrySingleton!&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//全局访问点</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> HungrySingleton <span class="hljs-title function_">getSingleton</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>写法2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span> &#123;<br>     <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Singleton</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>     <span class="hljs-comment">//静态代码块</span><br>     <span class="hljs-keyword">static</span> &#123;<br>         instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>();<br>     &#125;<br>     <span class="hljs-keyword">private</span> <span class="hljs-title function_">Singleton</span> <span class="hljs-params">()</span>&#123;&#125;<br>     <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Singleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>         <span class="hljs-keyword">return</span> instance;<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h4><ul><li>简单懒汉写法</li></ul><p>多线程不安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//简单懒汉写法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazySingleton</span> &#123;<br>    <span class="hljs-comment">//静态类对象 一开始并不初始化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">LazySingleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">//构造函数私有 外界不能访问</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazySingleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;<br>            singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazySingleton</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>Double-Check写法</li></ul><p>阻塞大量线程，性能下降</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Double-Check写法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> LazySingleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (LazySingleton.class) &#123;<br>                <span class="hljs-keyword">if</span> (singleton == <span class="hljs-literal">null</span>) &#123;<br>                    singleton = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazySingleton</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> singleton;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>内部类</li></ul><p>可以被反射和序列化破坏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//内部类写法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyInnerClassSingleton</span> &#123;<br>    <span class="hljs-comment">//私有的构造函数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">LazyInnerClassSingleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> LazyInnerClassSingleton <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> LazyHolder.singleton;<br>    &#125;<br>    <span class="hljs-comment">//外部类加载时,静态内部类并不加载</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LazyHolder</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">LazyInnerClassSingleton</span> <span class="hljs-variable">singleton</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LazyInnerClassSingleton</span>();<br>    &#125;<br>&#125;  <br></code></pre></td></tr></table></figure><h4 id="枚举式单例模式"><a href="#枚举式单例模式" class="headerlink" title="枚举式单例模式"></a>枚举式单例模式</h4><p><a href="https://blog.csdn.net/qq_36448587/article/details/107253971">https://blog.csdn.net/qq_36448587/article/details/107253971</a></p><p><img src="/assets%5Ceffectivejava.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">EnumSingleton</span> &#123;<br>    <span class="hljs-comment">//枚举单例 </span><br>    SINGLETON;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="容器式单例模式"><a href="#容器式单例模式" class="headerlink" title="容器式单例模式"></a>容器式单例模式</h4><p>非线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ContainerSingleton</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ContainerSingleton</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><span class="hljs-comment">//ConcurrentHashMap是HashMap的升级版 HashMap是线程不安全的 而ConcurrentHashMap是线程安全</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, Object&gt; ioc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getBean</span><span class="hljs-params">(String className)</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (ioc) &#123;<br>            <span class="hljs-keyword">if</span> (!ioc.containsKey(className)) &#123;<br>                <span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    o = Class.forName(className).newInstance();<br>                    ioc.put(className, o);<br>                &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                <span class="hljs-keyword">return</span> o;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> ioc.get(className);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Spring中的单例"><a href="#Spring中的单例" class="headerlink" title="Spring中的单例"></a>Spring中的单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> &lt;T&gt; T <span class="hljs-title function_">doGetBean</span><span class="hljs-params">(String name, <span class="hljs-meta">@Nullable</span> Class&lt;T&gt; requiredType, <span class="hljs-meta">@Nullable</span> Object[] args, <span class="hljs-type">boolean</span> typeCheckOnly)</span> <span class="hljs-keyword">throws</span> BeansException &#123;<br>  <span class="hljs-comment">//对Bean的名字进行处理 防止有非法字符等</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">beanName</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.transformedBeanName(name);<br>  <span class="hljs-comment">//调用getSingleton方法从获取bean单例</span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">sharedInstance</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getSingleton(beanName);<br>  Object bean;<br>  <span class="hljs-comment">//如果获取到了单例的bean</span><br>        <span class="hljs-keyword">if</span> (sharedInstance != <span class="hljs-literal">null</span> &amp;&amp; args == <span class="hljs-literal">null</span>) &#123;          <br>       ......<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.isPrototypeCurrentlyInCreation(beanName)) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanCurrentlyInCreationException</span>(beanName);<br>            &#125;<br><br>            <span class="hljs-type">BeanFactory</span> <span class="hljs-variable">parentBeanFactory</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getParentBeanFactory();<br>            <span class="hljs-keyword">if</span> (parentBeanFactory != <span class="hljs-literal">null</span> &amp;&amp; !<span class="hljs-built_in">this</span>.containsBeanDefinition(beanName))&#123;<br>              ......<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> bean;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>(<span class="hljs-number">256</span>);<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>(<span class="hljs-number">16</span>);<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>(<span class="hljs-number">16</span>);<br><br><br><span class="hljs-keyword">protected</span> Object <span class="hljs-title function_">getSingleton</span><span class="hljs-params">(String beanName, <span class="hljs-type">boolean</span> allowEarlyReference)</span> &#123;<br> <span class="hljs-comment">//首先从singletonObjects中获取单例对象（一级缓存）       </span><br>  <span class="hljs-type">Object</span> <span class="hljs-variable">singletonObject</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br>  <span class="hljs-comment">//如果没有获取到 并且此单例没有在创建 </span><br>  <span class="hljs-comment">//isSingletonCurrentlyInCreation的作用判断这个beanName是不是正在创建，也就是判断是不是循环依赖了。</span><br>        <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">this</span>.isSingletonCurrentlyInCreation(beanName)) &#123;<br>          <span class="hljs-comment">//从earlySingletonObjects中获取（二级缓存）</span><br>            singletonObject = <span class="hljs-built_in">this</span>.earlySingletonObjects.get(beanName);<br>            <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span> &amp;&amp; allowEarlyReference) &#123;<br>                <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>.singletonObjects) &#123;<br>                    singletonObject = <span class="hljs-built_in">this</span>.singletonObjects.get(beanName);<br>                    <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>                        singletonObject = <span class="hljs-built_in">this</span>.earlySingletonObjects.get(beanName);<br>                        <span class="hljs-keyword">if</span> (singletonObject == <span class="hljs-literal">null</span>) &#123;<br>                          <span class="hljs-comment">//从singletonFactories中获取</span><br>                            ObjectFactory&lt;?&gt; singletonFactory = (ObjectFactory)<span class="hljs-built_in">this</span>.singletonFactories.get(beanName);<br>                            <span class="hljs-keyword">if</span> (singletonFactory != <span class="hljs-literal">null</span>) &#123;<br>                                singletonObject = singletonFactory.getObject();<br>                                <span class="hljs-built_in">this</span>.earlySingletonObjects.put(beanName, singletonObject);<br>                                <span class="hljs-built_in">this</span>.singletonFactories.remove(beanName);<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> singletonObject;<br>    &#125;<br></code></pre></td></tr></table></figure><p>单例的获取顺利是<strong>singletonObjects ——&gt;earlySingletonObjects ——&gt;singletonFactories</strong> 这样的三级层次。</p><p>在singletonObjects 中获取bean的时候，没有使用synchronized关键字，而在singletonFactories 和earlySingletonObjects 中的操作都是在synchronized代码块中完成的，正好和他们各自的数据类型对应，singletonObjects 使用的使用ConcurrentHashMap线程安全，而singletonFactories 和earlySingletonObjects 使用的是HashMap，线程不安全。</p><p>从字面意思来说：singletonObjects指单例对象的cache，singletonFactories指单例对象工厂的cache，earlySingletonObjects指提前曝光的单例对象的cache。以上三个cache构成了三级缓存，Spring就用这三级缓存巧妙的解决了循环依赖问题。</p><p><strong>Spring创建bean是线程安全的，不代表bean的使用是线程安全的。Spring中bean没有使用任何的线程安全措施，对单例且有状态的bean是不安全的，prototype多例的bean和无状态的bean是线程安全的。</strong></p><h3 id="适配器模式-Adapter-Pattern-x2F-Wrapper"><a href="#适配器模式-Adapter-Pattern-x2F-Wrapper" class="headerlink" title="适配器模式(Adapter Pattern&#x2F;Wrapper)"></a>适配器模式(Adapter Pattern&#x2F;Wrapper)</h3><p><font color=red>Convert the inface of a class into another interface clients expect.Adapter lets classes work together that couldn’t otherwise because of incompatible interface.</font></p><p>将一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作.</p><p><em><u>”没有什么问题是加一层不能解决的“</u></em></p><h6 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h6><ul><li>更好的<strong>复用性</strong>：系统需要使用现有的类，但是此类的接口不符合系统需要。那么通过适配器模式就可以让这些功能得到更好的复用（原有的功能不需要再实现一遍）</li><li>更好的<strong>扩展性</strong>：在实现适配器功能的时候，可以调用自己开发的功能，从而自然地扩展系统的功能（不用修改原有代码）</li></ul><h6 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h6><p>过多的使用适配器，会使系统非常凌乱，不易整体进把握。</p><h4 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h4><p><img src="/assets%5C%E7%B1%BB%E9%80%82%E9%85%8D%E5%99%A8.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">specificRequest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;specificRequest...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Adaptee</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Target</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        specificRequest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h4><p><img src="/assets%5C%E5%AF%B9%E8%B1%A1%E9%80%82%E9%85%8D%E5%99%A8.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adaptee</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">specificRequest</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;specificRequest...&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Adapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Target</span> &#123;<br>    <span class="hljs-keyword">private</span> Adaptee adaptee;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adapter</span><span class="hljs-params">(Adaptee adaptee)</span> &#123;<br>        <span class="hljs-built_in">this</span>.adaptee = adaptee;<br>    &#125;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">request</span><span class="hljs-params">()</span> &#123;<br>        adaptee.specificRequest();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="缺省适配器"><a href="#缺省适配器" class="headerlink" title="缺省适配器"></a>缺省适配器</h4><p>当不需要实现一个接口所提供的所有方法时，可先设计一个抽象类实现该接口，并为接口中的每个方法提供一个默认实现(空方法)，该抽象类可以有选择性的覆盖父类的某些方法来实现需求。</p><p><img src="/assets%5C%E7%BC%BA%E7%9C%81%E9%80%82%E9%85%8D%E5%99%A8.jpg"></p><h4 id="双向适配器"><a href="#双向适配器" class="headerlink" title="双向适配器"></a>双向适配器</h4><p>在对象适配器中如果同时包含目标类和适配者类的引用，适配者可以通过它调用目标类中的方法，目标类也可以通过它调用适配者类中的方法</p><h4 id="Spring中的适配器模式"><a href="#Spring中的适配器模式" class="headerlink" title="Spring中的适配器模式"></a>Spring中的适配器模式</h4><p>SpringAOP和SpringMVC中都有用到适配器模式。</p><p>SpringAOP 中的 AdvisorAdapter 类，它有三个实现类 MethodBeforeAdviceAdapter、AfterReturningAdviceAdapter 和ThrowsAdviceAdapter。</p><p><img src="/assets%5C%E9%80%82%E9%85%8D%E5%99%A8%E5%9B%BE.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//springframework--&gt;aop--&gt;framework--&gt;adapter包</span><br><br><span class="hljs-comment">//Target</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AdvisorAdapter</span> &#123;<br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsAdvice</span><span class="hljs-params">(Advice var1)</span>;<br><br>    MethodInterceptor <span class="hljs-title function_">getInterceptor</span><span class="hljs-params">(Advisor var1)</span>;<br>&#125;<br><span class="hljs-comment">//Adapter</span><br><span class="hljs-comment">//适配MethodBeforeAdviceInterceptor 接口getInterceptor(Advisor advisor)</span><br><span class="hljs-comment">//进行一层包装 对外提供想要的方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodBeforeAdviceAdapter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AdvisorAdapter</span>, Serializable &#123;<br>    MethodBeforeAdviceAdapter() &#123;<br>    &#125;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsAdvice</span><span class="hljs-params">(Advice advice)</span> &#123;<br>        <span class="hljs-keyword">return</span> advice <span class="hljs-keyword">instanceof</span> MethodBeforeAdvice;<br>    &#125;<br><span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MethodInterceptor <span class="hljs-title function_">getInterceptor</span><span class="hljs-params">(Advisor advisor)</span> &#123;<br>        <span class="hljs-type">MethodBeforeAdvice</span> <span class="hljs-variable">advice</span> <span class="hljs-operator">=</span> (MethodBeforeAdvice)advisor.getAdvice();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodBeforeAdviceInterceptor</span>(advice);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Adaptee</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MethodBeforeAdvice</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BeforeAdvice</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">before</span><span class="hljs-params">(Method var1, Object[] var2, <span class="hljs-meta">@Nullable</span> Object var3)</span> <span class="hljs-keyword">throws</span> Throwable;<br>&#125;<br><span class="hljs-comment">//client </span><br><span class="hljs-comment">//调用AdvisorAdapter对外暴露的接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DefaultAdvisorAdapterRegistry</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AdvisorAdapterRegistry</span>, Serializable &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;AdvisorAdapter&gt; adapters = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DefaultAdvisorAdapterRegistry</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>.registerAdvisorAdapter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodBeforeAdviceAdapter</span>());<br>        <span class="hljs-built_in">this</span>.registerAdvisorAdapter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">AfterReturningAdviceAdapter</span>());<br>        <span class="hljs-built_in">this</span>.registerAdvisorAdapter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ThrowsAdviceAdapter</span>());<br>    &#125;<br>    <span class="hljs-keyword">public</span> Advisor <span class="hljs-title function_">wrap</span><span class="hljs-params">(Object adviceObject)</span> <span class="hljs-keyword">throws</span> UnknownAdviceTypeException &#123;<br>        ......<br>    &#125;<br><span class="hljs-comment">// 获取适配器对应的所有的拦截器</span><br>    <span class="hljs-keyword">public</span> MethodInterceptor[] getInterceptors(Advisor advisor) <span class="hljs-keyword">throws</span> UnknownAdviceTypeException &#123;<br>        List&lt;MethodInterceptor&gt; interceptors = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">3</span>);<br>        <span class="hljs-type">Advice</span> <span class="hljs-variable">advice</span> <span class="hljs-operator">=</span> advisor.getAdvice();<br>        <span class="hljs-keyword">if</span> (advice <span class="hljs-keyword">instanceof</span> MethodInterceptor) &#123;<br>            interceptors.add((MethodInterceptor)advice);<br>        &#125;<br><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.adapters.iterator();<br><br>        <span class="hljs-keyword">while</span>(var4.hasNext()) &#123;<br>            <span class="hljs-type">AdvisorAdapter</span> <span class="hljs-variable">adapter</span> <span class="hljs-operator">=</span> (AdvisorAdapter)var4.next();<br>            <span class="hljs-keyword">if</span> (adapter.supportsAdvice(advice)) &#123;<br>                interceptors.add(adapter.getInterceptor(advisor));<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (interceptors.isEmpty()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnknownAdviceTypeException</span>(advisor.getAdvice());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> (MethodInterceptor[])interceptors.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MethodInterceptor</span>[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerAdvisorAdapter</span><span class="hljs-params">(AdvisorAdapter adapter)</span> &#123;<br>        <span class="hljs-built_in">this</span>.adapters.add(adapter);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="模板方法模式-Template-Method-Pattern"><a href="#模板方法模式-Template-Method-Pattern" class="headerlink" title="模板方法模式(Template Method Pattern)"></a>模板方法模式(Template Method Pattern)</h3><p><font color=red>Define the skeleton of an algorithm in an operation,deferring some steps to subclasses.Template Method lets subclass redefine certain steps of an algorithm without changing the algorithm’s  structure.</font></p><p> 定义一个操作中的算法框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可以重定义该算法的某些特定步骤。</p><h6 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h6><ul><li><p>封装了不变部分，扩展可变部分。</p></li><li><p>在父类中提取了公共的部分代码，便于代码复用。</p></li><li><p>部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。</p></li></ul><h6 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h6><ul><li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li><li>由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍。</li></ul><p><img src="/assets%5C%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractClass</span> &#123;<br>    <span class="hljs-comment">// 共同的且繁琐的操作</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">baseOperation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125;<br><br>    <span class="hljs-comment">// 由子类定制的操作</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customOperation</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-comment">// 模板方法定义的框架</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">templateMethod</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 调用基本方法，完成固定逻辑</span><br><span class="hljs-comment">         */</span><br>        baseOperation();<br>        customOperation();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomClass1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractClass</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customOperation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 具体模板1 业务逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;具体模板1：customOperation()&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomClass2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractClass</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customOperation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 具体模板2 业务逻辑</span><br>        System.out.println(<span class="hljs-string">&quot;具体模板2：customOperation()&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="回调方式"><a href="#回调方式" class="headerlink" title="回调方式"></a>回调方式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CallBack</span> &#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">customOperation</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubCallBack</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CallBack</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">customOperation</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;callback operation1...&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">baseOperation</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;模板类公共操作&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">templateMethod</span><span class="hljs-params">(CallBack callback)</span>&#123;<br>        baseOperation();<br>        callback.customOperation();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h4><p>设计钩子方法的主要目的是干预模板方法的执行流程，使得控制行为流程更加灵活，更符合实际业务的需求。钩子方法的返回值一般为适合条件分支语句的返回值（如boolean、int等）。子类可以自行选择重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractBasePay</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BasePay</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mobilePay</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 钩子函数</span><br>        <span class="hljs-keyword">if</span> (isCheckAuth()) &#123;<br>            checkAuth();<br>        &#125;<br>        checkParam();<br>        checkRisk();<br>        channlePay();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkParam</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;检查参数&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkAuth</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;支付权限校验&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkRisk</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;风控校验&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-comment">//渠道支付</span><br>    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">channlePay</span><span class="hljs-params">()</span>;<br>    <br>    <span class="hljs-comment">//钩子函数，子类可以覆写，来选择手开启支付权限校验  默认不开启</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCheckAuth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EBankChannelPay</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractBasePay</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">channlePay</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;网银支付&quot;</span>);<br>    &#125;<br>    <br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">isCheckAuth</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="Spring中的模板方法模式"><a href="#Spring中的模板方法模式" class="headerlink" title="Spring中的模板方法模式"></a>Spring中的模板方法模式</h4><p>在spring源码中使用到模板模式的有以下几类（<strong>在Spring中大多数模板方式都是行为接口的定义：Callback</strong>）：</p><ul><li><strong>RestTemplate Http Restful接口请求模板</strong></li><li><strong>AsyncRestTemplate 异步Http Restful接口请求模板</strong></li><li><strong>JdbcTemplate JDBC关系型数据库操作模板</strong></li><li><strong>HibernateTemplate Hibernate关系型数据库操作模板</strong></li><li><strong>JmsTemplate 消息队列模板</strong></li><li><strong>TransactionTemplate 编程式事务模板</strong></li></ul><p>带有Template的基本都是模板方法模式。</p><h5 id="JdbcTemplate"><a href="#JdbcTemplate" class="headerlink" title="JdbcTemplate"></a>JdbcTemplate</h5><p>JdbcTemplate是JDBC核心软件包中的中心类。它简化了JDBC的使用，并有助于避免常见错误。它执行核心JDBC工作流程，留下应用程序代码以提供SQL并提取结果</p><p>spring通过JdbcTemplate提供原生的JDBC SQL语句执行操作。JdbcTemplate和JdbcOperations均位于org.springframework.jdbc.core下.</p><p>JdbcOperations提供最基本的SQL方法执行接口，JdbcTemplate负责模板方法调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ConnectionCallback</span>&lt;T&gt; &#123;<br>    <span class="hljs-meta">@Nullable</span><br>    T <span class="hljs-title function_">doInConnection</span><span class="hljs-params">(Connection var1)</span> <span class="hljs-keyword">throws</span> SQLException, DataAccessException;<br>&#125;<br><br><span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">execute</span><span class="hljs-params">(ConnectionCallback&lt;T&gt; action)</span> <span class="hljs-keyword">throws</span> DataAccessException &#123;<br>        Assert.notNull(action, <span class="hljs-string">&quot;Callback object must not be null&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DataSourceUtils.getConnection(<span class="hljs-built_in">this</span>.obtainDataSource());<br><br>        Object var10;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">conToUse</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.createConnectionProxy(con);<br>            var10 = action.doInConnection(conToUse);<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var8) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> getSql(action);<br>            DataSourceUtils.releaseConnection(con, <span class="hljs-built_in">this</span>.getDataSource());<br>            con = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">this</span>.translateException(<span class="hljs-string">&quot;ConnectionCallback&quot;</span>, sql, var8);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            DataSourceUtils.releaseConnection(con, <span class="hljs-built_in">this</span>.getDataSource());<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> var10;<br>    &#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@FunctionalInterface</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">StatementCallback</span>&lt;T&gt; &#123;<br>    <span class="hljs-meta">@Nullable</span><br>    T <span class="hljs-title function_">doInStatement</span><span class="hljs-params">(Statement var1)</span> <span class="hljs-keyword">throws</span> SQLException, DataAccessException;<br>&#125;<br><br><span class="hljs-meta">@Nullable</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; T <span class="hljs-title function_">execute</span><span class="hljs-params">(StatementCallback&lt;T&gt; action)</span> <span class="hljs-keyword">throws</span> DataAccessException &#123;<br>        Assert.notNull(action, <span class="hljs-string">&quot;Callback object must not be null&quot;</span>);<br>      <span class="hljs-comment">//1.获得连接  </span><br>      <span class="hljs-type">Connection</span> <span class="hljs-variable">con</span> <span class="hljs-operator">=</span> DataSourceUtils.getConnection(<span class="hljs-built_in">this</span>.obtainDataSource());<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">stmt</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        Object var11;<br>        <span class="hljs-keyword">try</span> &#123;<br>           <span class="hljs-comment">//2.创建语句</span><br>            stmt = con.createStatement();<br>            <span class="hljs-built_in">this</span>.applyStatementSettings(stmt);<br>          <span class="hljs-comment">//3.执行语句</span><br>            <span class="hljs-type">T</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> action.doInStatement(stmt);<br>            <span class="hljs-built_in">this</span>.handleWarnings(stmt);<br>            var11 = result;<br>        &#125; <span class="hljs-keyword">catch</span> (SQLException var9) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> getSql(action);<br>            JdbcUtils.closeStatement(stmt);<br>            stmt = <span class="hljs-literal">null</span>;<br>            DataSourceUtils.releaseConnection(con, <span class="hljs-built_in">this</span>.getDataSource());<br>            con = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-built_in">this</span>.translateException(<span class="hljs-string">&quot;StatementCallback&quot;</span>, sql, var9);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-comment">//4.关闭语句</span><br>            JdbcUtils.closeStatement(stmt);<br>          <span class="hljs-comment">//5.释放连接</span><br>            DataSourceUtils.releaseConnection(con, <span class="hljs-built_in">this</span>.getDataSource());<br>        &#125;<br>        <span class="hljs-keyword">return</span> var11;<br>    &#125;<br></code></pre></td></tr></table></figure><p>子类在实现该接口时，需要实现回调接口中的<code>doInStatement</code>方法，即执行SQL的相关逻辑，这样模板方法就会因doInstatement的不同逻辑而呈现不同的功能，如查询、更新等。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
      <category>Spring中的设计模式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
